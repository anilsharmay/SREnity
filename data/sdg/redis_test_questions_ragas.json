[
  {
    "question": "What is WAL-G in the context of PostgreSQL backups?",
    "answer": "WAL-G is associated with PostgreSQL backups, specifically mentioned in the context of alerts related to backup failures such as 'walgBaseBackupDelayed' and 'WALGBaseBackupFailed'.",
    "contexts": [
      "[PatroniLongRunningTransactionDetected](/patroni/alerts/PatroniLongRunningTransactionDetected/) - [PatroniScrapeFailures](/patroni/alerts/PatroniScrapeFailures/) - [PostgresSplitBrain](/patroni/alerts/PostgresSplitBrain/) - [walgBaseBackupDelayed, WALGBaseBackupFailed](/patroni/alerts/walgBaseBackup/) - [Steps to create (or recreate) a Standby CLuster using a Snapshot from a Production cluster as Master cluster (instead of pg\\_basebackup)](/patroni/build_cluster_from_snapshot/) - [Check the status of transaction wraparound Runbook](/patroni/check_wraparound/) - [Custom PostgreSQL Package Build Process for Ubuntu Xenial 16.04](/patroni/custom_postgres_packages/) - [database\\_peak\\_analysis](/patroni/database_peak_analysis/) - [How and when to deprovision the db-benchmarking environment](/patroni/deprovision-db-benchmarking-env/) - [Patroni GCS Snapshots](/patroni/gcs-snapshots/) - [Geo Patroni Cluster Management](/patroni/geo-patroni-cluster/) - [gitlab-com-wale-backups](/patroni/gitlab-com-wale-backups/) - [gitlab-com-walg-backups](/patroni/gitlab-com-walg-backups/) - [Postgres (Patroni) Service](/patroni/) - [Log analysis on PostgreSQL, Pgbouncer, Patroni and consul Runbook](/patroni/log_analysis/) - [Making a manual clone of the DB for the data team](/patroni/manual_data_team_clone/) - [Mapping Postgres Statements, Slowlogs, Activity Monitoring and Traces](/patroni/mapping_statements/) - [OS Upgrade Reference Architecture](/patroni/os_upgrade_reference_architecture/) - [Patroni Cluster Management](/patroni/patroni-management/) - [performance-degradation-troubleshooting](/patroni/performance-degradation-troubleshooting/) - [pg\\_collect\\_query\\_data](/patroni/pg_collect_query_data/) - [Postgresql minor upgrade](/patroni/pg_minor_upgrade/) - [Pg\\_repack using gitlab-pgrepack](/patroni/pg_repack/) - [`pg\\_xid\\_wraparound` Saturation Alert](/patroni/pg_xid_wraparound_alert/) - [`pg\\_txid\\_xmin\\_age` Saturation Alert](/patroni/pg_xid_xmin_age_alert/) - [pg-ext-manager](/patroni/pg-ext-manager/) - [PostgreSQL HA](/patroni/pg-ha/) - [pgbadger Runbook](/patroni/pgbadger_report/) - [Postgresql troubleshooting](/patroni/postgres/) - [postgres\\_exporter](/patroni/postgres_exporter/) - [GitLab application-side reindexing](/patroni/postgres-automatic-reindexing/) - [postgres-backups-verification-failures](/patroni/postgres-backups-verification-failures/) - [postgres-checkup](/patroni/postgres-checkup/) - [Dealing with Data Corruption in PostgreSQL](/patroni/postgres-data-corruption/) - [Diagnosing long running transactions](/patroni/postgres-long-running-transaction/) - [Postgres maintenance](/patroni/postgres-maintenance/) - [Postgresql](/patroni/postgresql/) - [PostgreSQL Backups: WAL-G](/patroni/postgresql-backups-wale-walg/) - [postgresql-buffermapping-lwlock-contention](/patroni/postgresql-buffermapping-lwlock-contention/) - [PostgreSQL](/patroni/postgresql-disk-space/) - [postgresql-locking](/patroni/postgresql-locking/) - [How to evaluate load from queries](/patroni/postgresql-query-load-evaluation/) - [PostgreSQL Trigram Indexes](/patroni/postgresql-rebuild-trigram-indexes/) - [Adding a PostgreSQL replica](/patroni/postgresql-replica/) - [Credential rotation](/patroni/postgresql-role-credential-rotation/) - [PostgreSQL subtransactions](/patroni/postgresql-subtransactions/) - [PostgreSQL VACUUM](/patroni/postgresql-vacuum/) - [Primary Database Node CPU Saturation Analysis](/patroni/primary_db_node_cpu_saturation/) - [Primary Database Node WAL Generation Saturation Analysis](/patroni/primary_db_node_wal_generation_saturation/) - [How to provision the benchmark environment](/patroni/provisioning_bench_env/) - [SQL query analysis and optimization for Postgres](/patroni/query-analysis/) - [Rails SQL Apdex alerts](/patroni/rails-sql-apdex-slow/) - [Rotating Rails' PostgreSQL password](/patroni/rotating-rails-postgresql-password/) - [Scale Down Patroni](/patroni/scale-down-patroni/) - [Scale Up Patroni](/patroni/scale-up-patroni/) - [High-level performance analysis and troubleshooting of a Postgres node](/patroni/single-node-high-level/) - [Handling Unhealthy Patroni Replica](/patroni/unhealthy_patroni_node_handling/) - [Roles/Users grants and permission Runbook](/patroni/user_grants_permission/) - [using-wale-gpg](/patroni/using-wale-gpg/) - [Postgres wait events analysis (a.k.a. Active Session History; ASH dashboard)](/patroni/wait-events-analisys/) - [WAL logs analysis](/patroni/wal_log_analysis/) - [Zero Downtime Postgres Database Decomposition](/patroni/zero-downtime-database-decomposition/) - patroni-ci - [CI Postgres (Patroni) Service](/patroni-ci/) - [Recovering from CI Patroni cluster lagging too much or becoming completely broken](/patroni-ci/recovering_patroni_ci_intense_lagging_or_replication_stopped/) - patroni-registry - [Registry Postgres (Patroni) Service](/patroni-registry/) - patroni-sec - [Sec Postgres (Patroni) Service](/patroni-sec/) - pd-event-logger-7760xa - [events](/pd-event-logger-7760xa/events/) - [Logs PagerDuty incident events to ElasticSearch Service](/pd-event-logger-7760xa/) - pgbouncer - alerts - [component\\_saturation\\_slo\\_out\\_of\\_bounds:pgbouncer\\_single\\_core](/pgbouncer/alerts/pgbouncer_single_core/) - [PGBouncer Primary Database Pool Service](/pgbouncer/) - [patroni-consul-postgres-pgbouncer-interactions](/pgbouncer/patroni-consul-postgres-pgbouncer-interactions/) - [Add a new PgBouncer instance](/pgbouncer/pgbouncer-add-instance/) - [pgbouncer-applications](/pgbouncer/pgbouncer-applications/) - [PgBouncer connection management and troubleshooting](/pgbouncer/pgbouncer-connections/) - [Removing a PgBouncer instance](/pgbouncer/pgbouncer-remove-instance/) - [Sidekiq or Web/API is using most of its PgBouncer connections](/pgbouncer/pgbouncer-saturation/) - [Pgbouncer Service](/pgbouncer/service-pgbouncer/) - pgbouncer-ci - [CI PGBouncer Primary Database Pool Service](/pgbouncer-ci/) - pgbouncer-registry - [Registry PGBouncer Primary Database Pool Service](/pgbouncer-registry/) - pgbouncer-sec - [Sec PGBouncer Primary Database Pool Service](/pgbouncer-sec/) - pingdom - [Pingdom Service](/pingdom/) - [Pingdom](/pingdom/pingdom/) - pipeline-validation-service - [Pipeline Validation Service](/pipeline-validation-service/) - plantuml - [PlantUML Service](/plantuml/) - [PlantUML](/plantuml/readiness/) - portal-poc - [Experimental Engineering Portal Service](/portal-poc/) - postgres-archive - [Postgres DR Archive Service](/postgres-archive/) - [Postgres archive replicas](/postgres-archive/postgres-dr-replicas/) - postgres-dr-delayed - [Postgres DR Delayed Replica Service](/postgres-dr-delayed/) - [Postgres Replicas](/postgres-dr-delayed/postgres-dr-replicas/) - product\\_analytics - [Product Analytics ClickHouse Failure Remediation, Backup & Restore Process](/product_analytics/clickhouse-backup-restore/) - [Product Analytics Service](/product_analytics/) - [Product Analytics Kubernetes Architecture](/product_analytics/k8s-architecture/) - [Product Analytics SSL Troubleshooting](/product_analytics/ssl-troubleshooting/) - psql-timings - [PSQL Timings Service](/psql-timings/) - pubsub - [Pubsub for Logging Service](/pubsub/) - [PubSub Queuing Rate Increasing](/pubsub/pubsub-queing/) - pvs - [Pvs Service](/pvs/) - rate-limiting - [index](/rate-limiting/) - redis - [Blocking individual IPs using Redis and Rack Attack](/redis/ban-an-IP-with-redis/) - [Clearing sessions for anonymous users](/redis/clear_anonymous_sessions/) - [Persistent Redis Service](/redis/) - [Redis on Kubernetes](/redis/kubernetes/) - [Memory space analysis with cupcake-rdb](/redis/memory-space-analysis-cupcake-rdb/) - [Provisioning Redis Cluster](/redis/provisioning-redis-cluster/) - [Troubleshooting](/redis/redis/) - [Redis Cluster](/redis/redis-cluster/) - [Functional Partitioning](/redis/redis-functional-partitioning/) - [Redis RDB Snapshots](/redis/redis-rdb-snapshots/) - [Redis-Sidekiq catchall workloads reduction](/redis/redis-sidekiq-catchall-workloads-reduction/) - [A survival guide for SREs to working with Redis at GitLab](/redis/redis-survival-guide-for-sres/) - [Scaling Redis Cluster](/redis/scaling-redis-cluster/) - redis-cluster-cache - [Redis Cluster Cache Service](/redis-cluster-cache/) - [Removing cache entries from Redis](/redis-cluster-cache/remove-cache-entries/) - redis-cluster-chat-cache - [Redis Cluster Chat Cache Service](/redis-cluster-chat-cache/) - redis-cluster-database-lb - [Redis Cluster Database Loadbalancing Service](/redis-cluster-database-lb/) - redis-cluster-feature-flag - [Redis Cluster Feature Flag Service](/redis-cluster-feature-flag/) - redis-cluster-queues-meta - [Redis Cluster Queues Meta Service](/redis-cluster-queues-meta/) - redis-cluster-ratelimiting - [Redis Cluster RateLimiting Service](/redis-cluster-ratelimiting/) - redis-cluster-registry - [Redis Cluster Registry Service](/redis-cluster-registry/) - redis-cluster-repo-cache - [Redis Cluster Repo Cache Service](/redis-cluster-repo-cache/) - redis-cluster-sessions - [Redis Cluster Sessions Service](/redis-cluster-sessions/) - redis-cluster-shared-state - [Redis Cluster SharedState Service](/redis-cluster-shared-state/) - redis-feature-flag - [Redis-feature-flag Service](/redis-feature-flag/) - redis-pubsub - [Redis Pub/Sub Service](/redis-pubsub/) - redis-ratelimiting - [Redis-ratelimiting Service](/redis-ratelimiting/) - redis-registry-cache - [Redis Registry Cache Service](/redis-registry-cache/) - redis-sessions - [Redis Sessions Service](/redis-sessions/) - redis-sidekiq - [Redis Sidekiq Service](/redis-sidekiq/) - redis-tracechunks - [Redis TraceChunks Service](/redis-tracechunks/) - registry - alerts - [ContainerRegistryDBLoadBalancerReplicaPoolSize](/registry/alerts/ContainerRegistryDBLoadBalancerReplicaPoolSize/) - [ContainerRegistryNotifications](/registry/alerts/ContainerRegistryNotifications/) - [PatroniRegistryServiceDnsLookupsApdexSLOViolation](/registry/alerts/PatroniRegistryServiceDnsLookupsApdexSLOViolation/) - [Database Connection Pool Saturation](/registry/app-db-conn-pool-saturation/) - [Container Registry Batched Background Migrations](/registry/background-migrations/) - [Container Registry CDN](/registry/cdn/) - [Container Registry Database Index Bloat](/registry/db-index-bloat/) - [Container Registry Database Load Balancing](/registry/db-load-balancing/) - [Container Registry database post-deployment migrations](/registry/db-post-deployment-migrations/) - [gitlab-registry](/registry/gitlab-registry/) - [Container Registry Service](/registry/) - [High Number of Overdue Online GC Tasks](/registry/online-gc-high-overdue-tasks/) - [High Number of Pending or Failed Outgoing Webhook Notifications](/registry/webhook-notifications/) - release-management - [High build pressure](/release-management/build_pressure/) - [High deploy pressure](/release-management/deploy_pressure/) - release-tooling - [Delivery Release Tooling Service](/release-tooling/) - renovate - [Renovate at GitLab: Current Implementation Documentation](/renovate/) - repository-mirroring - [Repository Mirroring Service](/repository-mirroring/) - [Mirror Updates Silently Failing](/repository-mirroring/mirror-updates-silently-failing/) - [Pull Mirroring Timeout with Large LFS Files](/repository-mirroring/pull-mirroring-timeout-with-large-lfs-files/) - runway - [Restore/Backup Runway-managed Cloud SQL](/runway/cloudsql_backup_restore/) - [Cloud SQL Restore Pipeline Troubleshooting](/runway/cloudsql_restore_pipeline_troubleshooting/) - [Runway Platform Service](/runway/) - [Privileged Access Management](/runway/privileged_access_management/) - runway-db-example - [Example Runway-managed Postgres Service](/runway-db-example/) - runway-redis-example - [Example Runway-managed Redis Service](/runway-redis-example/) - sast-service - [SAST Scanner Service for SAST in the IDE](/sast-service/) - search - [Global Search Service](/search/) - secret-detection - [Detects secret leaks in the given payloads Service](/secret-detection/) - secret-revc-worker - [Secret Revocation Worker Service](/secret-revc-worker/) - secret-revocation - [Secret Revocation Service](/secret-revocation/) - security-patching - alerts - [UbuntuLivepatch](/security-patching/alerts/UbuntuLivepatch/) - linux-os - [Linux OS Patching](/security-patching/linux-os/linux-os-patching/) - [Patching Notifications](/security-patching/linux-os/notifications/) - systems - [Bastions](/security-patching/linux-os/systems/bastions/) - [Console](/security-patching/linux-os/systems/console/) - [Deploy](/security-patching/linux-os/systems/deploy/) - [Gitaly](/security-patching/linux-os/systems/gitaly/) - [GKE](/security-patching/linux-os/systems/gke/) - [HAProxy](/security-patching/linux-os/systems/haproxy/) - [Patroni](/security-patching/linux-os/systems/patroni/) - [PGBouncer](/security-patching/linux-os/systems/pgbouncer/) - [Redis](/security-patching/linux-os/systems/redis/) - [Runner Managers](/security-patching/linux-os/systems/runner-managers/) - sentry - [Monitoring Service](/sentry/) - [Troubleshooting](/sentry/sentry/) - service\\_desk - [Debugging Service Desk](/service_desk/) - sidekiq - alerts - [Title: SidekiqQueueTooLarge](/sidekiq/alerts/SidekiqQueueTooLarge/) - [Disabling Sidekiq workers](/sidekiq/disabling-a-worker/) - [Sidekiq Background Jobs Service](/sidekiq/) - [Pull mirror overdue queue is too large](/sidekiq/large-pull-mirror-queue/) - [Sidekiq queue migration](/sidekiq/queue-migration/) - [sharding](/sidekiq/sharding/) - [sidekiq\\_error\\_rate\\_high](/sidekiq/sidekiq_error_rate_high/) - [Sidekiq Concurrency Limit](/sidekiq/sidekiq-concurrency-limit/) - [Poking around at sidekiq's running state](/sidekiq/sidekiq-inspection/) - [Sidekiq queue no longer"
    ],
    "ground_truths": [
      "WAL-G is associated with PostgreSQL backups, specifically mentioned in the context of alerts related to backup failures such as 'walgBaseBackupDelayed' and 'WALGBaseBackupFailed'."
    ]
  },
  {
    "question": "What is the significance of RAILS_INSTANCE_NAME in the context of configuring GitLab Rails?",
    "answer": "RAILS_INSTANCE_NAME is the name that GitLab Rails would recognize, matching the naming convention used in redis.xxx.yml or the second top-level key in redis.yml. It is crucial for ensuring that the instance name aligns with the application's configuration requirements.",
    "contexts": [
      "2. Create Chef roles](#2-create-chef-roles) - [3. Provision VMs](#3-provision-vms) - [4. Initialising the cluster](#4-initialising-the-cluster) - [5. Validation](#5-validation) - [Configuring the applications](#configuring-the-applications) - [1. Configure console instances](#1-configure-console-instances) - [2. Verification of config in a VM](#2-verification-of-config-in-a-vm) - [3. Configure Gitlab Rails](#3-configure-gitlab-rails) - [4. Troubleshooting](#4-troubleshooting) ## On this page - [Overview](#_top) - [Setting up instances](#setting-up-instances) - [1. Generate Redis passwords](#1-generate-redis-passwords) - [2. Create Chef roles](#2-create-chef-roles) - [3. Provision VMs](#3-provision-vms) - [4. Initialising the cluster](#4-initialising-the-cluster) - [5. Validation](#5-validation) - [Configuring the applications](#configuring-the-applications) - [1. Configure console instances](#1-configure-console-instances) - [2. Verification of config in a VM](#2-verification-of-config-in-a-vm) - [3. Configure Gitlab Rails](#3-configure-gitlab-rails) - [4. Troubleshooting](#4-troubleshooting) # Provisioning Redis Cluster This document outlines the steps for provisioning a Redis Cluster. Former attempts are documented here: - [`redis-cluster-ratelimiting`](https://gitlab.com/gitlab-com/gl-infra/scalability/-/issues/2256) - [`redis-cluster-chat-cache`](https://gitlab.com/gitlab-com/gl-infra/scalability/-/issues/2358) ## Setting up instances [Section titled “Setting up instances”](#setting-up-instances) First, this guide defines a few variables in `<>`, namely: - `ENV`: `pre`, `gstg`, `gprd` - `GCP_PROJECT`: `gitlab-production` or `gitlab-staging-1` - `INSTANCE_TYPE`: `feature-flag` - `RAILS_INSTANCE_NAME`: The name that GitLab Rails would recognise. This matches `redis.xxx.yml` or the 2nd-top-level key in `redis.yml` (top-level key being `production`) - `RAILS_INSTANCE_NAME_OMNIBUS`: `RAILS_INSTANCE_NAME` but using underscore, i.e. `feature_flag` instead of `feature-flag` - `RAILS_CLASS_NAME`: The class which would connect to the new Redis Cluster. e.g. `Gitlab::Redis::FeatureFlag`. - `REPLICA_REDACTED`: Generated in [Generate Redis passwords step](#1-generate-redis-passwords) - `RAILS_REDACTED`: Generated in [Generate Redis passwords step](#1-generate-redis-passwords) - `EXPORTER_REDACTED`: Generated in [Generate Redis passwords step](#1-generate-redis-passwords) - `CONSOLE_REDACTED`: Generated in [Generate Redis passwords step](#1-generate-redis-passwords) When configuring the application, note that the name of the instance must match the object name in lowercase and kebab-case/snake-case in the application. E.g. We have `redis-cluster-chat-cache` service but in GitLab Rails, the object is `Gitlab::Redis::Chat`. Hence `chat` should be used when configuring the secret for the application in console and Kubernetes. **Note:** To avoid mistakes in manually copy-pasting the variables in `<>` above during a provisioning session, it is recommended to prepare this doc with all the variables replaced beforehand. ### 1. Generate Redis passwords [Section titled “1. Generate Redis passwords”](#1-generate-redis-passwords) Generate four passwords, `REPLICA_REDACTED`, `RAILS_REDACTED`, `EXPORTER_REDACTED`, and `CONSOLE_REDACTED` using: ``` for I in REPLICA_REDACTED RAILS_REDACTED EXPORTER_REDACTED CONSOLE_REDACTED; do echo $I; openssl rand -hex 32; done ``` Update both `redis-cluster` and `redis-exporter` gkms vault secrets using these commands in the [`chef-repo`](https://gitlab.com/gitlab-com/gl-infra/chef-repo/-/tree/master): ``` ./bin/gkms-vault-edit redis-cluster <ENV> ``` Update the JSON payload to include the new instance details: ``` { ..., \"redis-cluster-<INSTANCE_TYPE>\": { \"redis_conf\": { \"masteruser\": \"replica\", \"masterauth\": \"<REPLICA_REDACTED>\", \"user\": [ \"default off\", \"replica on ~* &* +@all ><REPLICA_REDACTED>\", \"console on ~* &* +@all ><CONSOLE_REDACTED>\", \"redis_exporter on +client +ping +info +config|get +cluster|info +slowlog +latency +memory +select +get +scan +xinfo +type +pfcount +strlen +llen +scard +zcard +hlen +xlen +eval allkeys ><EXPORTER_REDACTED>\", \"rails on ~* &* +@all -debug ><RAILS_REDACTED>\" ] } } } ``` Do the same for ``` ./bin/gkms-vault-edit redis-exporter <ENV> ``` Modify the existing JSON ``` { \"redis_exporter\": { \"redis-cluster-<INSTANCE_TYPE>\": { \"env\": { \"REDIS_PASSWORD\": \"<EXPORTER_REDACTED>\" } } } } ``` ### 2. Create Chef roles [Section titled “2. Create Chef roles”](#2-create-chef-roles) Set the new chef roles and add the new role to the list of gitlab-redis roles in -infra-prometheus-server role. An example MR can be found [here](https://gitlab.com/gitlab-com/gl-infra/chef-repo/-/merge_requests/3494). ### 3. Provision VMs [Section titled “3. Provision VMs”](#3-provision-vms) Provision the VMs via the generic-stor/google terraform module. This is done in the [config-mgmt project in the ops environment](https://ops.gitlab.net/gitlab-com/gl-infra/config-mgmt/). An example MR can be found [here](https://ops.gitlab.net/gitlab-com/gl-infra/config-mgmt/-/merge_requests/5811). After the MR is merged and applied, check the VM state via: ``` gcloud compute instances list --project <GCP_PROJECT> | grep 'redis-cluster-<INSTANCE_TYPE>' ``` You need to wait for the initial chef-client run to complete. One way to check is to tail the serial port output to check when the initial run is completed. An example: ``` gcloud compute --project=<GCP_PROJECT> instances tail-serial-port-output redis-cluster-<INSTANCE_TYPE>-shard-01-01-db-<ENV> --zone us-east1-{c/b/d} ``` ### 4. Initialising the cluster [Section titled “4. Initialising the cluster”](#4-initialising-the-cluster) a. SSH into one of the instance: ``` ssh redis-cluster-<INSTANCE_TYPE>-shard-01-01-db-<ENV>.c.<GCP_PROJECT>.internal ``` b. Run the following: ``` export ENV=<ENV> export PROJECT=<GCP_PROJECT> export DEPLOYMENT=redis-cluster-<INSTANCE_TYPE> ``` c. Use the following command to connect the master-nodes and initialise a working cluster. Add more shard FQDN where necessary. e.g. `$DEPLOYMENT-shard-<shard_number>-01-db-$ENV.c.$PROJECT.internal:6379`. ``` sudo gitlab-redis-cli --cluster create \\ $DEPLOYMENT-shard-01-01-db-$ENV.c.$PROJECT.internal:6379 \\ $DEPLOYMENT-shard-02-01-db-$ENV.c.$PROJECT.internal:6379 \\ $DEPLOYMENT-shard-03-01-db-$ENV.c.$PROJECT.internal:6379 ``` Use the following command to connect the remaining nodes to the cluster. Update `{01, 02, 03, ... n}-{02,03,..m}` where `n` is the number of shards and `m` is the number of instances per shard. ``` for i in {01,02,03}-{02,03}; do sudo gitlab-redis-cli --cluster add-node \\ $DEPLOYMENT-shard-$i-db-$ENV.c.$PROJECT.internal:6379 \\ $DEPLOYMENT-shard-01-01-db-$ENV.c.$PROJECT.internal:6379 sleep 2 done ``` Use the following command, to assign the replicas within each shard. Update `{01, 02, 03, ... n}-{02,03,..n}` where necessary depending on the cluster-size. ``` for i in {01,02,03}; do for j in {02,03}; do node_id=\"$(sudo gitlab-redis-cli cluster nodes | grep $DEPLOYMENT-shard-$i-01-db-$ENV.c.$PROJECT.internal | awk '{ print $1 }')\"; sudo gitlab-redis-cli -h $DEPLOYMENT-shard-$i-$j-db-$ENV.c.$PROJECT.internal \\ cluster replicate $node_id done done ``` ### 5. Validation [Section titled “5. Validation”](#5-validation) Wait for a few seconds as the nodes need time to gossip. Check the status via: ``` $ sudo gitlab-redis-cli --cluster info $DEPLOYMENT-shard-01-01-db-$ENV.c.$PROJECT.internal:6379 redis-cluster-ratelimiting-shard-01-01-db-gprd.c.gitlab-production.internal:6379 (9b0828e3...) -> 0 keys | 5461 slots | 2 slaves. 10.217.21.3:6379 (ac03fcee...) -> 0 keys | 5461 slots | 2 slaves. 10.217.21.4:6379 (f8341afd...) -> 0 keys | 5462 slots | 2 slaves. [OK] 0 keys in 3 masters. 0.00 keys per slot on average. $ sudo gitlab-redis-cli cluster info | head -n7 cluster_state:ok cluster_slots_assigned:16384 cluster_slots_ok:16384 cluster_slots_pfail:0 cluster_slots_fail:0 cluster_known_nodes:9 cluster_size:3 ``` ## Configuring the applications [Section titled “Configuring the applications”](#configuring-the-applications) ### 1. Configure console instances [Section titled “1. Configure console instances”](#1-configure-console-instances) a. Proxy and authenticate to Hashicorp Vault: ``` glsh vault proxy export VAULT_PROXY_ADDR=\"socks5://localhost:18200\" glsh vault login ``` ``` vault kv get -format=json chef/env/<ENV>/shared/gitlab-omnibus-secrets | jq '.data.data' > data.json cat data.json | jq --arg PASSWORD <RAILS_REDACTED> '.\"omnibus-gitlab\".gitlab_rb.\"gitlab-rails\".redis_yml_override.<RAILS_INSTANCE_NAME_OMNIBUS>.password = $PASSWORD' > data.json.tmp diff -u data.json data.json.tmp mv data.json.tmp data.json vault kv patch chef/env/<ENV>/shared/gitlab-omnibus-secrets @data.json rm data.json OR glsh vault edit-secret chef env/<ENV>/shared/gitlab-omnibus-secrets # Add the following object in .\"omnibus-gitlab\".gitlab_rb.\"gitlab-rails\".redis_yml_override : # \"<RAILS_INSTANCE_NAME_OMNIBUS>\": { # \"password\": <RAILS_REDACTED> # } ``` Update roles/-base.json with the relevant connection details. An example MR can be found [here](https://gitlab.com/gitlab-com/gl-infra/chef-repo/-/merge_requests/3546). ### 2. Verification of config in a VM [Section titled “2. Verification"
    ],
    "ground_truths": [
      "RAILS_INSTANCE_NAME is the name that GitLab Rails would recognize, matching the naming convention used in redis.xxx.yml or the second top-level key in redis.yml. It is crucial for ensuring that the instance name aligns with the application's configuration requirements."
    ]
  },
  {
    "question": "How chef help in setting up instances for Redis?",
    "answer": "Chef is used in the process of setting up instances for Redis by running `chef-client` to update the node and render the updated configuration files. This is crucial as the pipeline does not check the correctness of the config files, which may impact the deploy-node since GitLab Rails connects to Redis instances on start-up.",
    "contexts": [
      "Setting up instances](#setting-up-instances) - [1. Generate Redis passwords](#1-generate-redis-passwords) - [2. Create Chef roles](#2-create-chef-roles) - [3. Provision VMs](#3-provision-vms) - [4. Initialising the cluster](#4-initialising-the-cluster) - [5. Validation](#5-validation) - [  1. Generate Redis passwords](#1-generate-redis-passwords) - [ of config in a VM”](#2-verification-of-config-in-a-vm) Check the confirmation detail by using `gitlab-rails console` inside a console instance. You may need to run `chef-client` to update the node and render the updated configuration files. This is important as the pipeline does not check the correctness of the config files. This may impact the deploy-node as GitLab Rails connects to Redis instances on start-up. There was a past incident of such an [issue](https://gitlab.com/gitlab-com/gl-infra/production/-/issues/16322) for reference. ``` [ gstg ] production> Gitlab::Redis::FeatureFlag.with{|c| c.ping} # replace Gitlab::Redis::FeatureFlag with <RAILS_CLASS_NAME> => \"PONG\" [ gstg ] production> ``` ### 3. Configure Gitlab Rails [Section titled “3. Configure Gitlab Rails”](#3-configure-gitlab-rails) a. Update secret ``` vault kv put k8s/env/<ENV>/ns/gitlab/redis-cluster-<INSTANCE_TYPE>-rails password=<RAILS_REDACTED> ``` For example, ``` vault kv get k8s/env/<ENV>/ns/gitlab/redis-cluster-<INSTANCE_TYPE>-rails ======================== Secret Path ======================== k8s/data/env/gprd/ns/gitlab/redis-cluster-ratelimiting-rails ======= Metadata ======= Key Value --- ----- created_time 2023-03-18T00:33:29.790293426Z custom_metadata <nil> deletion_time n/a destroyed false version 1 ====== Data ====== Key Value --- ----- password <RAILS_REDACTED> ``` Note the version of the password in `vault kv get` and make sure it tallies with the external secret definition in [k8s-workload](https://gitlab.com/gitlab-com/gl-infra/k8s-workloads/gitlab-com/-/blob/master/releases/gitlab-external-secrets/values/values.yaml.gotmpl): ``` gitlab-redis-cluster-<INSTANCE_TYPE>-rails-credential-v1: refreshInterval: 0 secretStoreName: gitlab-secrets target: creationPolicy: Owner deletionPolicy: Delete data: - remoteRef: key: env/{{ $env }}/ns/gitlab/redis-cluster-<INSTANCE_TYPE>-rails property: password version: \"1\" secretKey: password ``` Note that when rotating secrets (eg having v1 in `gstg` and v2 in `gprd`), follow a safe and controlled rollout as described [here](https://gitlab.com/gitlab-com/runbooks/-/blob/master/docs/vault/usage.md?ref_type=heads#rotating-kubernetes-secrets). b. Update Gitlab Rails `.Values.global.redis` accordingly. Either add a new key to `.Values.global.redis.<RAILS_INSTANCE_NAME>` or `.Values.global.redis.redisYmlOverride.<RAILS_INSTANCE_NAME>`. An example MR can be found [here](https://gitlab.com/gitlab-com/gl-infra/k8s-workloads/gitlab-com/-/merge_requests/2753). ### 4. Troubleshooting [Section titled “4. Troubleshooting”](#4-troubleshooting) #### No metrics on dashboard [Section titled “No metrics on dashboard”](#no-metrics-on-dashboard) This was encountered when provisioning the [production instance of redis-cluster-chat-cache](https://gitlab.com/gitlab-com/gl-infra/scalability/-/issues/2358#note_1406105979). To resolve this, run chef-repo on Prometheus with: ``` knife ssh roles:gprd-infra-prometheus-server \"sudo chef-client\" ``` [Edit page](https://gitlab.com/gitlab-com/runbooks/-/edit/master/docs/redis/provisioning-redis-cluster.md) [Previous Memory space analysis with cupcake-rdb](/redis/memory-space-analysis-cupcake-rdb/) [Next Troubleshooting](/redis/redis/)"
    ],
    "ground_truths": [
      "Chef is used in the process of setting up instances for Redis by running `chef-client` to update the node and render the updated configuration files. This is crucial as the pipeline does not check the correctness of the config files, which may impact the deploy-node since GitLab Rails connects to Redis instances on start-up."
    ]
  },
  {
    "question": "What is the significance of database connection in cloud services, particularly in the context of Redis?",
    "answer": "The significance of database connection in cloud services, particularly in the context of Redis, lies in its role in ensuring reliable data storage and caching. Redis operates in a cluster mode with a specific configuration of nodes, which facilitates efficient data access and management. This setup is crucial for maintaining the performance and reliability of applications that depend on Redis for their chat features and other functionalities.",
    "contexts": [
      "<1-hop>\n\n[Connecting To a Database via Teleport](/teleport/Connect_to_Database_Console_via_Teleport/) - [Connecting To a Rails Console via Teleport](/teleport/Connect_to_Rails_Console_via_Teleport/) - [Teleport](/teleport/) - [Teleport Administration](/teleport/teleport_admin/) - [Teleport Approver Workflow](/teleport/teleport_approval_workflow/) - [Teleport Disaster Recovery](/teleport/teleport_disaster_recovery/) - [(Title: Name of alert)](/template-alert-playbook/) - [(Title: Service Name)](/template-service-overview/) - thanos - [thanos Service](/thanos/) - token-rotation-management - [Token rotation management Service](/token-rotation-management/) - topology-grpc - [Topology Service gRPC](/topology-grpc/) - topology-rest - [Breakglass](/topology-rest/breakglass/) - [Topology Service Rest](/topology-rest/) - tracing - [Distributed Tracing Service](/tracing/) - tutorials - [Incident Diagnosis in a Symptom-based World](/tutorials/diagnosis/) - [Example Tutorial Template](/tutorials/example_tutorial_template/) - [How to use flamegraphs for performance profiling](/tutorials/how_to_use_flamegraphs_for_perf_profiling/) - [Tutorials](/tutorials/) - [Life of a Git Request](/tutorials/overview_life_of_a_git_request/) - [Life of a Web Request](/tutorials/overview_life_of_a_web_request/) - [Tips for writing tutorials](/tutorials/tips_for_tutorial_writing/) - uncategorized - [about.gitlab.com](/uncategorized/about-gitlab-com/) - [access-gcp-hosts](/uncategorized/access-gcp-hosts/) - [Access Requests](/uncategorized/access-requests/) - [Alert about SSL certificate expiration](/uncategorized/alert-for-ssl-certificate-expiration/) - [Alert Routing](/uncategorized/alert-routing/) - alerts - [component\\_saturation\\_slo\\_out\\_of\\_bounds:gcp\\_quota\\_limit](/uncategorized/alerts/gcp_quota_limit/) - [Alerts Should Have Runbook Annotations](/uncategorized/alerts-should-have-runbook-annotations/) - [Aptly](/uncategorized/aptly/) - [Auto DevOps](/uncategorized/auto-devops/) - [Benchmarking Database Instances](/uncategorized/benchmark-database-instance/) - [Blocking a project causing high load](/uncategorized/block-high-load-project/) - [Blocked user login attempts are high](/uncategorized/blocked-user-logins/) - [Canary in GCP production and staging](/uncategorized/canary/) - [Cloud SQL Data Export](/uncategorized/cloudsql-data-export/) - [Create:Code Review Group Runbook](/uncategorized/code-review-group/) - [Release Artifact Bucket](/uncategorized/creating-bucket-for-release-artifacts/) - [Debug failed chef provisioning](/uncategorized/debug-failed-chef-provisioning/) - [Deleting a project manually](/uncategorized/delete-projects-manually/) - [Deleted Project Restoration](/uncategorized/deleted-project-restore/) - [Deploy Cmd for Chatops](/uncategorized/deploycmd/) - [GitLab dev environment](/uncategorized/dev-environment/) - [disable-chef-runs-on-a-vm](/uncategorized/disable-chef-runs-on-a-vm/) - [Domain Registration](/uncategorized/domain-registration/) - [Error budget weekly reporting](/uncategorized/error-budget-weekly/) - externalvendors - [Getting help with GCP support and Rackspace](/uncategorized/externalvendors/GCP-rackspace-support/) - [Feature Flags](/uncategorized/featureflags/) - [Getting setup with Google gcloud CLI](/uncategorized/gcloud-cli/) - [gcp-network-intelligence](/uncategorized/gcp-network-intelligence/) - [GCP Projects](/uncategorized/gcp-project/) - [Managing Geekbot standups](/uncategorized/geekbot-standup/) - gke-runner - [index](/uncategorized/gke-runner/) - [INSTRUCTIONS](/uncategorized/gke-runner/INSTRUCTIONS/) - [Chef secrets using GKMS](/uncategorized/gkms-chef-secrets/) - [GitLab Flavored Markdown (GLFM)](/uncategorized/glfm-markdown/) - [granting-rails-or-db-access](/uncategorized/granting-rails-or-db-access/) - [GitLab Job Completion](/uncategorized/job_completion/) - [Managing Chef](/uncategorized/manage-chef/) - [Manage DNS entries](/uncategorized/manage-dns-entries/) - [Migration Skipping](/uncategorized/migration-skipping/) - [Missing Repositories](/uncategorized/missing_repos/) - [Google mtail for prometheus metrics](/uncategorized/mtail/) - [namespace-restore](/uncategorized/namespace-restore/) - [Node CPU alerts](/uncategorized/node_cpu/) - [Node Reboots](/uncategorized/node-reboots/) - [Omnibus package troubleshooting](/uncategorized/omnibus-package-updates/) - [OPS-GITLAB-NET Users and Access Tokens](/uncategorized/ops-gitlab-net-pat/) - [OSQuery](/uncategorized/osquery/) - [patching-production](/uncategorized/patching-production/) - [Periodic Job Monitoring](/uncategorized/periodic_job_monitoring/) - [Project exports](/uncategorized/project-export/) - [Rails is down](/uncategorized/rails-is-down/) - release.gitlab.net - [`release.gitlab.net`](/uncategorized/release.gitlab.net/) - [Remove Blobs](/uncategorized/remove-blobs/) - [Removing kernels from fleet](/uncategorized/remove-kernels/) - [Ruby profiling](/uncategorized/ruby-profiling/) - [Shared Configurations](/uncategorized/shared-configurations/) - snowplow - [index](/uncategorized/snowplow/) - [GitLab staging environment](/uncategorized/staging-environment/) - [subnet-allocations](/uncategorized/subnet-allocations/) - [Terraform Broken Main](/uncategorized/terraform-broken-main/) - [Application Database Queries](/uncategorized/tracing-app-db-queries/) - [Upgrades and Rollbacks of Application Code](/uncategorized/upgrade-and-rollback/) - [How to upload a file to Google Cloud Storage from any system without a credentials configuration](/uncategorized/upload-file-to-gcs-using-signed-url/) - [Uploads](/uncategorized/uploads/) - [Workers under heavy load because of being used as a CDN](/uncategorized/workers-high-load/) - [Configuring and Using the Yubikey](/uncategorized/yubikey/) - [Rate of successful user logins is zero](/uncategorized/zero-successful-user-logins/) - vault - [Access Management for Vault](/vault/access/) - [Vault Administration](/vault/administration/) - [Hashicorp Vault for Infrastructure Service](/vault/) - [Troubleshooting Hashicorp Vault](/vault/troubleshooting/) - [How to Use Vault for Secrets Management in Infrastructure](/vault/usage/) - [Vault Audit Log Analysis](/vault/usage-analysis/) - [Vault Secrets Management](/vault/vault/) - version - [version.gitlab.com Service](/version/) - [version.gitlab.com Runbook](/version/version-gitlab-com/) - web - [Diagnostic Reports](/web/diagnostic-reports/) - [GitLab.com Web Service](/web/) - [Rails middleware: path traversal](/web/rails-middleware-path-traversal/) - [Static objects caching](/web/static-objects-caching/) - [Static repository objects caching](/web/static-repository-objects-caching/) - [Workhorse Image Scaler](/web/workhorse-image-scaler/) - web-pages - [GitLab Pages Service](/web-pages/) - websockets - [Websockets Service](/websockets/) - [Custom Websocket Alerts](/websockets/slow-broken-upgrades/) - wikis - [Wikis](/wikis/) - wiz-runtime-sensor - [Wiz Sensor Service](/wiz-runtime-sensor/) - woodhouse - [Woodhouse Service](/woodhouse/) - woodhouse-slack - [Woodhouse Slack bot Service](/woodhouse-slack/) - [Woodhouse-Slack Overview](/woodhouse-slack/overview/) - workhorse - [Workhorse Service](/workhorse/) - [Workhorse Apdex Degradation](/workhorse/workhorse-apdex-degradation/) - workspaces - [Remote Development Workspaces Service](/workspaces/) - zoekt - [Exact code search Service](/zoekt/) (() => { const scroller = document.getElementById('starlight\\_\\_sidebar'); if (!window.\\_starlightScrollRestore || !scroller) return; scroller.scrollTop = window.\\_starlightScrollRestore; delete window.\\_starlightScrollRestore; })(); [GitLab](https://gitlab.com/gitlab-com/runbooks)[Code Context](https://code-context.runway.gitlab.net/runbooks-docs) Select theme DarkLightAuto StarlightThemeProvider.updatePickers(); const a=document.getElementById(\"starlight\\_\\_sidebar\"),n=a?.querySelector(\"sl-sidebar-state-persist\"),o=\"sl-sidebar-state\",i=()=>{let t=[];const e=n?.dataset.hash||\"\";try{const s=sessionStorage.getItem(o),r=JSON.parse(s||\"{}\");Array.isArray(r.open)&&r.hash===e&&(t=r.open)}catch{}return{hash:e,open:t,scroll:a?.scrollTop||0}},c=t=>{try{sessionStorage.setItem(o,JSON.stringify(t))}catch{}},d=()=>c(i()),l=(t,e)=>{const s=i();s.open[e]=t,c(s)};n?.addEventListener(\"click\",t=>{if(!(t.target instanceof Element))return;const e=t.target.closest(\"summary\")?.closest(\"details\");if(!e)return;const s=e.querySelector(\"sl-sidebar-restore\"),r=parseInt(s?.dataset.index||\"\");isNaN(r)||l(!e.open,r)});addEventListener(\"visibilitychange\",()=>{document.visibilityState===\"hidden\"&&d()});addEventListener(\"pageHide\",d); On this page - [Overview](#_top) - [Logging](#logging) ## On this page - [Overview](#_top) - [Logging](#logging) # Redis Cluster Chat Cache Service - [Service Overview](https://dashboards.gitlab.net/d/redis-cluster-chat-cache-main/redis-cluster-chat-cache-overview) - **Alerts**: <https://alerts.gitlab.net/#/alerts?filter=%7Btype%3D%22redis-cluster-chat-cache%22%2C%20tier%3D%22db%22%7D> - **Label**: gitlab-com/gl-infra/production~“Service::RedisClusterChatCache” ## Logging [Section titled “Logging”](#logging) - system The Chat Cache Redis Cluster instances is a distinct Redis Cluster used by the GitLab Rails [chat features](https://gitlab.com/gitlab-org/gitlab/-/issues/410521). Redis is in a 3-node-per-shard (single-primary/two-replica per shard) VM configuration, in cluster mode. The node count will start off at 3 but will increase as we scale horizontally. Uses the same metrics-catalog definitions as for the other Redis clusters. [Edit page](https://gitlab.com/gitlab-com/runbooks/-/edit/master/docs/redis-cluster-chat-cache/README.md) [Previous Removing cache entries from Redis](/redis-cluster-cache/remove-cache-entries/) [Next Redis Cluster Database Loadbalancing Service](/redis-cluster-database-lb/)"
    ],
    "ground_truths": [
      "The significance of database connection in cloud services, particularly in the context of Redis, lies in its role in ensuring reliable data storage and caching. Redis operates in a cluster mode with a specific configuration of nodes, which facilitates efficient data access and management. This setup is crucial for maintaining the performance and reliability of applications that depend on Redis for their chat features and other functionalities."
    ]
  },
  {
    "question": "What are the key aspects of Patroni cluster management in relation to PostgreSQL, and how does it ensure high availability?",
    "answer": "Patroni cluster management is crucial for maintaining high availability in PostgreSQL environments. It automates the management of PostgreSQL clusters, ensuring that the database remains operational even in the event of node failures. Key aspects include the use of distributed consensus algorithms to manage leader election and failover processes, as well as the integration with tools like Pgbouncer for connection pooling. This setup allows for seamless scaling and recovery, thereby enhancing the reliability and performance of production systems utilizing PostgreSQL.",
    "contexts": [
      "<1-hop>\n\n[Geo Patroni Cluster Management](/patroni/geo-patroni-cluster/) - [gitlab-com-wale-backups](/patroni/gitlab-com-wale-backups/) - [gitlab-com-walg-backups](/patroni/gitlab-com-walg-backups/) - [Postgres (Patroni) Service](/patroni/) - [Log analysis on PostgreSQL, Pgbouncer, Patroni and consul Runbook](/patroni/log_analysis/) - [Making a manual clone of the DB for the data team](/patroni/manual_data_team_clone/) - [Mapping Postgres Statements, Slowlogs, Activity Monitoring and Traces](/patroni/mapping_statements/) - [OS Upgrade Reference Architecture](/patroni/os_upgrade_reference_architecture/) - [Patroni Cluster Management](/patroni/patroni-management/) - [performance-degradation-troubleshooting](/patroni/performance-degradation-troubleshooting/) - [pg\\_collect\\_query\\_data](/patroni/pg_collect_query_data/) - [Postgresql minor upgrade](/patroni/pg_minor_upgrade/) - [Pg\\_repack using gitlab-pgrepack](/patroni/pg_repack/) - [`pg\\_xid\\_wraparound` Saturation Alert](/patroni/pg_xid_wraparound_alert/) - [`pg\\_txid\\_xmin\\_age` Saturation Alert](/patroni/pg_xid_xmin_age_alert/) - [pg-ext-manager](/patroni/pg-ext-manager/) - [PostgreSQL HA](/patroni/pg-ha/) - [pgbadger Runbook](/patroni/pgbadger_report/) - [Postgresql troubleshooting](/patroni/postgres/) - [postgres\\_exporter](/patroni/postgres_exporter/) - [GitLab application-side reindexing](/patroni/postgres-automatic-reindexing/) - [postgres-backups-verification-failures](/patroni/postgres-backups-verification-failures/) - [postgres-checkup](/patroni/postgres-checkup/) - [Dealing with Data Corruption in PostgreSQL](/patroni/postgres-data-corruption/) - [Diagnosing long running transactions](/patroni/postgres-long-running-transaction/) - [Postgres maintenance](/patroni/postgres-maintenance/) - [Postgresql](/patroni/postgresql/) - [PostgreSQL Backups: WAL-G](/patroni/postgresql-backups-wale-walg/) - [postgresql-buffermapping-lwlock-contention](/patroni/postgresql-buffermapping-lwlock-contention/) - [PostgreSQL](/patroni/postgresql-disk-space/) - [postgresql-locking](/patroni/postgresql-locking/) - [How to evaluate load from queries](/patroni/postgresql-query-load-evaluation/) - [PostgreSQL Trigram Indexes](/patroni/postgresql-rebuild-trigram-indexes/) - [Adding a PostgreSQL replica](/patroni/postgresql-replica/) - [Credential rotation](/patroni/postgresql-role-credential-rotation/) - [PostgreSQL subtransactions](/patroni/postgresql-subtransactions/) - [PostgreSQL VACUUM](/patroni/postgresql-vacuum/) - [Primary Database Node CPU Saturation Analysis](/patroni/primary_db_node_cpu_saturation/) - [Primary Database Node WAL Generation Saturation Analysis](/patroni/primary_db_node_wal_generation_saturation/) - [How to provision the benchmark environment](/patroni/provisioning_bench_env/) - [SQL query analysis and optimization for Postgres](/patroni/query-analysis/) - [Rails SQL Apdex alerts](/patroni/rails-sql-apdex-slow/) - [Rotating Rails' PostgreSQL password](/patroni/rotating-rails-postgresql-password/) - [Scale Down Patroni](/patroni/scale-down-patroni/) - [Scale Up Patroni](/patroni/scale-up-patroni/) - [High-level performance analysis and troubleshooting of a Postgres node](/patroni/single-node-high-level/) - [Handling Unhealthy Patroni Replica](/patroni/unhealthy_patroni_node_handling/) - [Roles/Users grants and permission Runbook](/patroni/user_grants_permission/) - [using-wale-gpg](/patroni/using-wale-gpg/) - [Postgres wait events analysis (a.k.a. Active Session History; ASH dashboard)](/patroni/wait-events-analisys/) - [WAL logs analysis](/patroni/wal_log_analysis/) - [Zero Downtime Postgres Database Decomposition](/patroni/zero-downtime-database-decomposition/) - patroni-ci - [CI Postgres (Patroni) Service](/patroni-ci/) - [Recovering from CI Patroni cluster lagging too much or becoming completely broken](/patroni-ci/recovering_patroni_ci_intense_lagging_or_replication_stopped/) - patroni-registry - [Registry Postgres (Patroni) Service](/patroni-registry/) - patroni-sec - [Sec Postgres (Patroni) Service](/patroni-sec/) - pd-event-logger-7760xa - [events](/pd-event-logger-7760xa/events/) - [Logs PagerDuty incident events to ElasticSearch Service](/pd-event-logger-7760xa/) - pgbouncer - alerts - [component\\_saturation\\_slo\\_out\\_of\\_bounds:pgbouncer\\_single\\_core](/pgbouncer/alerts/pgbouncer_single_core/) - [PGBouncer Primary Database Pool Service](/pgbouncer/) - [patroni-consul-postgres-pgbouncer-interactions](/pgbouncer/patroni-consul-postgres-pgbouncer-interactions/) - [Add a new PgBouncer instance](/pgbouncer/pgbouncer-add-instance/) - [pgbouncer-applications](/pgbouncer/pgbouncer-applications/) - [PgBouncer connection management and troubleshooting](/pgbouncer/pgbouncer-connections/) - [Removing a PgBouncer instance](/pgbouncer/pgbouncer-remove-instance/) - [Sidekiq or Web/API is using most of its PgBouncer connections](/pgbouncer/pgbouncer-saturation/) - [Pgbouncer Service](/pgbouncer/service-pgbouncer/) - pgbouncer-ci - [CI PGBouncer Primary Database Pool Service](/pgbouncer-ci/) - pgbouncer-registry - [Registry PGBouncer Primary Database Pool Service](/pgbouncer-registry/) - pgbouncer-sec - [Sec PGBouncer Primary Database Pool Service](/pgbouncer-sec/) - pingdom - [Pingdom Service](/pingdom/) - [Pingdom](/pingdom/pingdom/) - pipeline-validation-service - [Pipeline Validation Service](/pipeline-validation-service/) - plantuml - [PlantUML Service](/plantuml/) - [PlantUML](/plantuml/readiness/) - portal-poc - [Experimental Engineering Portal Service](/portal-poc/) - postgres-archive - [Postgres DR Archive Service](/postgres-archive/) - [Postgres archive replicas](/postgres-archive/postgres-dr-replicas/) - postgres-dr-delayed - [Postgres DR Delayed Replica Service](/postgres-dr-delayed/) - [Postgres Replicas](/postgres-dr-delayed/postgres-dr-replicas/) - product\\_analytics - [Product Analytics ClickHouse Failure Remediation, Backup & Restore Process](/product_analytics/clickhouse-backup-restore/) - [Product Analytics Service](/product_analytics/) - [Product Analytics Kubernetes Architecture](/product_analytics/k8s-architecture/) - [Product Analytics SSL Troubleshooting](/product_analytics/ssl-troubleshooting/) - psql-timings - [PSQL Timings Service](/psql-timings/) - pubsub - [Pubsub for Logging Service](/pubsub/) - [PubSub Queuing Rate Increasing](/pubsub/pubsub-queing/) - pvs - [Pvs Service](/pvs/) - rate-limiting - [index](/rate-limiting/) - redis - [Blocking individual IPs using Redis and Rack Attack](/redis/ban-an-IP-with-redis/) - [Clearing sessions for anonymous users](/redis/clear_anonymous_sessions/) - [Persistent Redis Service](/redis/) - [Redis on Kubernetes](/redis/kubernetes/) - [Memory space analysis with cupcake-rdb](/redis/memory-space-analysis-cupcake-rdb/) - [Provisioning Redis Cluster](/redis/provisioning-redis-cluster/) - [Troubleshooting](/redis/redis/) - [Redis Cluster](/redis/redis-cluster/) - [Functional Partitioning](/redis/redis-functional-partitioning/) - [Redis RDB Snapshots](/redis/redis-rdb-snapshots/) - [Redis-Sidekiq catchall workloads reduction](/redis/redis-sidekiq-catchall-workloads-reduction/) - [A survival guide for SREs to working with Redis at GitLab](/redis/redis-survival-guide-for-sres/) - [Scaling Redis Cluster](/redis/scaling-redis-cluster/) - redis-cluster-cache - [Redis Cluster Cache Service](/redis-cluster-cache/) - [Removing cache entries from Redis](/redis-cluster-cache/remove-cache-entries/) - redis-cluster-chat-cache - [Redis Cluster Chat Cache Service](/redis-cluster-chat-cache/) - redis-cluster-database-lb - [Redis Cluster Database Loadbalancing Service](/redis-cluster-database-lb/) - redis-cluster-feature-flag - [Redis Cluster Feature Flag Service](/redis-cluster-feature-flag/) - redis-cluster-queues-meta - [Redis Cluster Queues Meta Service](/redis-cluster-queues-meta/) - redis-cluster-ratelimiting - [Redis Cluster RateLimiting Service](/redis-cluster-ratelimiting/) - redis-cluster-registry - [Redis Cluster Registry Service](/redis-cluster-registry/) - redis-cluster-repo-cache - [Redis Cluster Repo Cache Service](/redis-cluster-repo-cache/) - redis-cluster-sessions - [Redis Cluster Sessions Service](/redis-cluster-sessions/) - redis-cluster-shared-state - [Redis Cluster SharedState Service](/redis-cluster-shared-state/) - redis-feature-flag - [Redis-feature-flag Service](/redis-feature-flag/) - redis-pubsub - [Redis Pub/Sub Service](/redis-pubsub/) - redis-ratelimiting - [Redis-ratelimiting Service](/redis-ratelimiting/) - redis-registry-cache - [Redis Registry Cache Service](/redis-registry-cache/) - redis-sessions - [Redis Sessions Service](/redis-sessions/) - redis-sidekiq - [Redis Sidekiq Service](/redis-sidekiq/) - redis-tracechunks - [Redis TraceChunks Service](/redis-tracechunks/) - registry - alerts - [ContainerRegistryDBLoadBalancerReplicaPoolSize](/registry/alerts/ContainerRegistryDBLoadBalancerReplicaPoolSize/) - [ContainerRegistryNotifications](/registry/alerts/ContainerRegistryNotifications/) - [PatroniRegistryServiceDnsLookupsApdexSLOViolation](/registry/alerts/PatroniRegistryServiceDnsLookupsApdexSLOViolation/) - [Database Connection Pool Saturation](/registry/app-db-conn-pool-saturation/) - [Container Registry Batched Background Migrations](/registry/background-migrations/) - [Container Registry CDN](/registry/cdn/) - [Container Registry Database Index Bloat](/registry/db-index-bloat/) - [Container Registry Database Load Balancing](/registry/db-load-balancing/) - [Container Registry database post-deployment migrations](/registry/db-post-deployment-migrations/) - [gitlab-registry](/registry/gitlab-registry/) - [Container Registry Service](/registry/) - [High Number of Overdue Online GC Tasks](/registry/online-gc-high-overdue-tasks/) - [High Number of Pending or Failed Outgoing Webhook Notifications](/registry/webhook-notifications/) - release-management - [High build pressure](/release-management/build_pressure/) - [High deploy pressure](/release-management/deploy_pressure/) - release-tooling - [Delivery Release Tooling Service](/release-tooling/) - renovate - [Renovate at GitLab: Current Implementation Documentation](/renovate/) - repository-mirroring - [Repository Mirroring Service](/repository-mirroring/) - [Mirror Updates Silently Failing](/repository-mirroring/mirror-updates-silently-failing/) - [Pull Mirroring Timeout with Large LFS Files](/repository-mirroring/pull-mirroring-timeout-with-large-lfs-files/) - runway - [Restore/Backup Runway-managed Cloud SQL](/runway/cloudsql_backup_restore/) - [Cloud SQL Restore Pipeline Troubleshooting](/runway/cloudsql_restore_pipeline_troubleshooting/) - [Runway Platform Service](/runway/) - [Privileged Access Management](/runway/privileged_access_management/) - runway-db-example - [Example Runway-managed Postgres Service](/runway-db-example/) - runway-redis-example - [Example Runway-managed Redis Service](/runway-redis-example/) - sast-service - [SAST Scanner Service for SAST in the IDE](/sast-service/) - search - [Global Search Service](/search/) - secret-detection - [Detects secret leaks in the given payloads Service](/secret-detection/) - secret-revc-worker - [Secret Revocation Worker Service](/secret-revc-worker/) - secret-revocation - [Secret Revocation Service](/secret-revocation/) - security-patching - alerts - [UbuntuLivepatch](/security-patching/alerts/UbuntuLivepatch/) - linux-os - [Linux OS Patching](/security-patching/linux-os/linux-os-patching/) - [Patching Notifications](/security-patching/linux-os/notifications/) - systems - [Bastions](/security-patching/linux-os/systems/bastions/) - [Console](/security-patching/linux-os/systems/console/) - [Deploy](/security-patching/linux-os/systems/deploy/) - [Gitaly](/security-patching/linux-os/systems/gitaly/) - [GKE](/security-patching/linux-os/systems/gke/) - [HAProxy](/security-patching/linux-os/systems/haproxy/) - [Patroni](/security-patching/linux-os/systems/patroni/) - [PGBouncer](/security-patching/linux-os/systems/pgbouncer/) - [Redis](/security-patching/linux-os/systems/redis/) - [Runner Managers](/security-patching/linux-os/systems/runner-managers/) - sentry - [Monitoring Service](/sentry/) - [Troubleshooting](/sentry/sentry/) - service\\_desk - [Debugging Service Desk](/service_desk/) - sidekiq - alerts - [Title: SidekiqQueueTooLarge](/sidekiq/alerts/SidekiqQueueTooLarge/) - [Disabling Sidekiq workers](/sidekiq/disabling-a-worker/) - [Sidekiq Background Jobs Service](/sidekiq/) - [Pull mirror overdue queue is too large](/sidekiq/large-pull-mirror-queue/) - [Sidekiq queue migration](/sidekiq/queue-migration/) - [sharding](/sidekiq/sharding/) - [sidekiq\\_error\\_rate\\_high](/sidekiq/sidekiq_error_rate_high/) - [Sidekiq Concurrency Limit](/sidekiq/sidekiq-concurrency-limit/) - [Poking around at sidekiq's running state](/sidekiq/sidekiq-inspection/) - [Sidekiq queue no longer being processed](/sidekiq/sidekiq-queue-not-being-processed/) - [`sidekiq\\_queueing` apdex violation](/sidekiq/sidekiq-queueing-apdex/) - [Sidekiq SLIs](/sidekiq/sidekiq-slis/) - [A survival guide for SREs to working with Sidekiq at GitLab](/sidekiq/sidekiq-survival-guide-for-sres/) - [Exporting projects silently](/sidekiq/silent-project-exports/) - spamcheck - [Spamcheck Service](/spamcheck/) - stackdriver - [Stackdriver Metrics Service](/stackdriver/) - staging-ref - [GET Monitoring Setup](/staging-ref/get-monitoring-setup/) - [Staging ref](/staging-ref/) - storage - fs - zfs - zlonk - [Zlonk Service](/storage/fs/zfs/zlonk/) - switchboard - [Switchboard Service](/switchboard/) - teleport -"
    ],
    "ground_truths": [
      "Patroni cluster management is crucial for maintaining high availability in PostgreSQL environments. It automates the management of PostgreSQL clusters, ensuring that the database remains operational even in the event of node failures. Key aspects include the use of distributed consensus algorithms to manage leader election and failover processes, as well as the integration with tools like Pgbouncer for connection pooling. This setup allows for seamless scaling and recovery, thereby enhancing the reliability and performance of production systems utilizing PostgreSQL."
    ]
  },
  {
    "question": "What are the key aspects of Patroni Cluster Management and how does it relate to secret detection in PostgreSQL environments?",
    "answer": "Patroni Cluster Management is essential for managing PostgreSQL clusters, ensuring high availability and automated failover. It includes various services such as the Postgres (Patroni) Service and tools for log analysis, performance troubleshooting, and database maintenance. Secret detection, on the other hand, is crucial for identifying and mitigating risks associated with sensitive information leaks in the database. The integration of secret detection within the Patroni management framework helps maintain security by ensuring that sensitive credentials are not exposed in logs or configurations, thereby enhancing the overall security posture of the PostgreSQL environment.",
    "contexts": [
      "<1-hop>\n\n[Geo Patroni Cluster Management](/patroni/geo-patroni-cluster/) - [gitlab-com-wale-backups](/patroni/gitlab-com-wale-backups/) - [gitlab-com-walg-backups](/patroni/gitlab-com-walg-backups/) - [Postgres (Patroni) Service](/patroni/) - [Log analysis on PostgreSQL, Pgbouncer, Patroni and consul Runbook](/patroni/log_analysis/) - [Making a manual clone of the DB for the data team](/patroni/manual_data_team_clone/) - [Mapping Postgres Statements, Slowlogs, Activity Monitoring and Traces](/patroni/mapping_statements/) - [OS Upgrade Reference Architecture](/patroni/os_upgrade_reference_architecture/) - [Patroni Cluster Management](/patroni/patroni-management/) - [performance-degradation-troubleshooting](/patroni/performance-degradation-troubleshooting/) - [pg\\_collect\\_query\\_data](/patroni/pg_collect_query_data/) - [Postgresql minor upgrade](/patroni/pg_minor_upgrade/) - [Pg\\_repack using gitlab-pgrepack](/patroni/pg_repack/) - [`pg\\_xid\\_wraparound` Saturation Alert](/patroni/pg_xid_wraparound_alert/) - [`pg\\_txid\\_xmin\\_age` Saturation Alert](/patroni/pg_xid_xmin_age_alert/) - [pg-ext-manager](/patroni/pg-ext-manager/) - [PostgreSQL HA](/patroni/pg-ha/) - [pgbadger Runbook](/patroni/pgbadger_report/) - [Postgresql troubleshooting](/patroni/postgres/) - [postgres\\_exporter](/patroni/postgres_exporter/) - [GitLab application-side reindexing](/patroni/postgres-automatic-reindexing/) - [postgres-backups-verification-failures](/patroni/postgres-backups-verification-failures/) - [postgres-checkup](/patroni/postgres-checkup/) - [Dealing with Data Corruption in PostgreSQL](/patroni/postgres-data-corruption/) - [Diagnosing long running transactions](/patroni/postgres-long-running-transaction/) - [Postgres maintenance](/patroni/postgres-maintenance/) - [Postgresql](/patroni/postgresql/) - [PostgreSQL Backups: WAL-G](/patroni/postgresql-backups-wale-walg/) - [postgresql-buffermapping-lwlock-contention](/patroni/postgresql-buffermapping-lwlock-contention/) - [PostgreSQL](/patroni/postgresql-disk-space/) - [postgresql-locking](/patroni/postgresql-locking/) - [How to evaluate load from queries](/patroni/postgresql-query-load-evaluation/) - [PostgreSQL Trigram Indexes](/patroni/postgresql-rebuild-trigram-indexes/) - [Adding a PostgreSQL replica](/patroni/postgresql-replica/) - [Credential rotation](/patroni/postgresql-role-credential-rotation/) - [PostgreSQL subtransactions](/patroni/postgresql-subtransactions/) - [PostgreSQL VACUUM](/patroni/postgresql-vacuum/) - [Primary Database Node CPU Saturation Analysis](/patroni/primary_db_node_cpu_saturation/) - [Primary Database Node WAL Generation Saturation Analysis](/patroni/primary_db_node_wal_generation_saturation/) - [How to provision the benchmark environment](/patroni/provisioning_bench_env/) - [SQL query analysis and optimization for Postgres](/patroni/query-analysis/) - [Rails SQL Apdex alerts](/patroni/rails-sql-apdex-slow/) - [Rotating Rails' PostgreSQL password](/patroni/rotating-rails-postgresql-password/) - [Scale Down Patroni](/patroni/scale-down-patroni/) - [Scale Up Patroni](/patroni/scale-up-patroni/) - [High-level performance analysis and troubleshooting of a Postgres node](/patroni/single-node-high-level/) - [Handling Unhealthy Patroni Replica](/patroni/unhealthy_patroni_node_handling/) - [Roles/Users grants and permission Runbook](/patroni/user_grants_permission/) - [using-wale-gpg](/patroni/using-wale-gpg/) - [Postgres wait events analysis (a.k.a. Active Session History; ASH dashboard)](/patroni/wait-events-analisys/) - [WAL logs analysis](/patroni/wal_log_analysis/) - [Zero Downtime Postgres Database Decomposition](/patroni/zero-downtime-database-decomposition/) - patroni-ci - [CI Postgres (Patroni) Service](/patroni-ci/) - [Recovering from CI Patroni cluster lagging too much or becoming completely broken](/patroni-ci/recovering_patroni_ci_intense_lagging_or_replication_stopped/) - patroni-registry - [Registry Postgres (Patroni) Service](/patroni-registry/) - patroni-sec - [Sec Postgres (Patroni) Service](/patroni-sec/) - pd-event-logger-7760xa - [events](/pd-event-logger-7760xa/events/) - [Logs PagerDuty incident events to ElasticSearch Service](/pd-event-logger-7760xa/) - pgbouncer - alerts - [component\\_saturation\\_slo\\_out\\_of\\_bounds:pgbouncer\\_single\\_core](/pgbouncer/alerts/pgbouncer_single_core/) - [PGBouncer Primary Database Pool Service](/pgbouncer/) - [patroni-consul-postgres-pgbouncer-interactions](/pgbouncer/patroni-consul-postgres-pgbouncer-interactions/) - [Add a new PgBouncer instance](/pgbouncer/pgbouncer-add-instance/) - [pgbouncer-applications](/pgbouncer/pgbouncer-applications/) - [PgBouncer connection management and troubleshooting](/pgbouncer/pgbouncer-connections/) - [Removing a PgBouncer instance](/pgbouncer/pgbouncer-remove-instance/) - [Sidekiq or Web/API is using most of its PgBouncer connections](/pgbouncer/pgbouncer-saturation/) - [Pgbouncer Service](/pgbouncer/service-pgbouncer/) - pgbouncer-ci - [CI PGBouncer Primary Database Pool Service](/pgbouncer-ci/) - pgbouncer-registry - [Registry PGBouncer Primary Database Pool Service](/pgbouncer-registry/) - pgbouncer-sec - [Sec PGBouncer Primary Database Pool Service](/pgbouncer-sec/) - pingdom - [Pingdom Service](/pingdom/) - [Pingdom](/pingdom/pingdom/) - pipeline-validation-service - [Pipeline Validation Service](/pipeline-validation-service/) - plantuml - [PlantUML Service](/plantuml/) - [PlantUML](/plantuml/readiness/) - portal-poc - [Experimental Engineering Portal Service](/portal-poc/) - postgres-archive - [Postgres DR Archive Service](/postgres-archive/) - [Postgres archive replicas](/postgres-archive/postgres-dr-replicas/) - postgres-dr-delayed - [Postgres DR Delayed Replica Service](/postgres-dr-delayed/) - [Postgres Replicas](/postgres-dr-delayed/postgres-dr-replicas/) - product\\_analytics - [Product Analytics ClickHouse Failure Remediation, Backup & Restore Process](/product_analytics/clickhouse-backup-restore/) - [Product Analytics Service](/product_analytics/) - [Product Analytics Kubernetes Architecture](/product_analytics/k8s-architecture/) - [Product Analytics SSL Troubleshooting](/product_analytics/ssl-troubleshooting/) - psql-timings - [PSQL Timings Service](/psql-timings/) - pubsub - [Pubsub for Logging Service](/pubsub/) - [PubSub Queuing Rate Increasing](/pubsub/pubsub-queing/) - pvs - [Pvs Service](/pvs/) - rate-limiting - [index](/rate-limiting/) - redis - [Blocking individual IPs using Redis and Rack Attack](/redis/ban-an-IP-with-redis/) - [Clearing sessions for anonymous users](/redis/clear_anonymous_sessions/) - [Persistent Redis Service](/redis/) - [Redis on Kubernetes](/redis/kubernetes/) - [Memory space analysis with cupcake-rdb](/redis/memory-space-analysis-cupcake-rdb/) - [Provisioning Redis Cluster](/redis/provisioning-redis-cluster/) - [Troubleshooting](/redis/redis/) - [Redis Cluster](/redis/redis-cluster/) - [Functional Partitioning](/redis/redis-functional-partitioning/) - [Redis RDB Snapshots](/redis/redis-rdb-snapshots/) - [Redis-Sidekiq catchall workloads reduction](/redis/redis-sidekiq-catchall-workloads-reduction/) - [A survival guide for SREs to working with Redis at GitLab](/redis/redis-survival-guide-for-sres/) - [Scaling Redis Cluster](/redis/scaling-redis-cluster/) - redis-cluster-cache - [Redis Cluster Cache Service](/redis-cluster-cache/) - [Removing cache entries from Redis](/redis-cluster-cache/remove-cache-entries/) - redis-cluster-chat-cache - [Redis Cluster Chat Cache Service](/redis-cluster-chat-cache/) - redis-cluster-database-lb - [Redis Cluster Database Loadbalancing Service](/redis-cluster-database-lb/) - redis-cluster-feature-flag - [Redis Cluster Feature Flag Service](/redis-cluster-feature-flag/) - redis-cluster-queues-meta - [Redis Cluster Queues Meta Service](/redis-cluster-queues-meta/) - redis-cluster-ratelimiting - [Redis Cluster RateLimiting Service](/redis-cluster-ratelimiting/) - redis-cluster-registry - [Redis Cluster Registry Service](/redis-cluster-registry/) - redis-cluster-repo-cache - [Redis Cluster Repo Cache Service](/redis-cluster-repo-cache/) - redis-cluster-sessions - [Redis Cluster Sessions Service](/redis-cluster-sessions/) - redis-cluster-shared-state - [Redis Cluster SharedState Service](/redis-cluster-shared-state/) - redis-feature-flag - [Redis-feature-flag Service](/redis-feature-flag/) - redis-pubsub - [Redis Pub/Sub Service](/redis-pubsub/) - redis-ratelimiting - [Redis-ratelimiting Service](/redis-ratelimiting/) - redis-registry-cache - [Redis Registry Cache Service](/redis-registry-cache/) - redis-sessions - [Redis Sessions Service](/redis-sessions/) - redis-sidekiq - [Redis Sidekiq Service](/redis-sidekiq/) - redis-tracechunks - [Redis TraceChunks Service](/redis-tracechunks/) - registry - alerts - [ContainerRegistryDBLoadBalancerReplicaPoolSize](/registry/alerts/ContainerRegistryDBLoadBalancerReplicaPoolSize/) - [ContainerRegistryNotifications](/registry/alerts/ContainerRegistryNotifications/) - [PatroniRegistryServiceDnsLookupsApdexSLOViolation](/registry/alerts/PatroniRegistryServiceDnsLookupsApdexSLOViolation/) - [Database Connection Pool Saturation](/registry/app-db-conn-pool-saturation/) - [Container Registry Batched Background Migrations](/registry/background-migrations/) - [Container Registry CDN](/registry/cdn/) - [Container Registry Database Index Bloat](/registry/db-index-bloat/) - [Container Registry Database Load Balancing](/registry/db-load-balancing/) - [Container Registry database post-deployment migrations](/registry/db-post-deployment-migrations/) - [gitlab-registry](/registry/gitlab-registry/) - [Container Registry Service](/registry/) - [High Number of Overdue Online GC Tasks](/registry/online-gc-high-overdue-tasks/) - [High Number of Pending or Failed Outgoing Webhook Notifications](/registry/webhook-notifications/) - release-management - [High build pressure](/release-management/build_pressure/) - [High deploy pressure](/release-management/deploy_pressure/) - release-tooling - [Delivery Release Tooling Service](/release-tooling/) - renovate - [Renovate at GitLab: Current Implementation Documentation](/renovate/) - repository-mirroring - [Repository Mirroring Service](/repository-mirroring/) - [Mirror Updates Silently Failing](/repository-mirroring/mirror-updates-silently-failing/) - [Pull Mirroring Timeout with Large LFS Files](/repository-mirroring/pull-mirroring-timeout-with-large-lfs-files/) - runway - [Restore/Backup Runway-managed Cloud SQL](/runway/cloudsql_backup_restore/) - [Cloud SQL Restore Pipeline Troubleshooting](/runway/cloudsql_restore_pipeline_troubleshooting/) - [Runway Platform Service](/runway/) - [Privileged Access Management](/runway/privileged_access_management/) - runway-db-example - [Example Runway-managed Postgres Service](/runway-db-example/) - runway-redis-example - [Example Runway-managed Redis Service](/runway-redis-example/) - sast-service - [SAST Scanner Service for SAST in the IDE](/sast-service/) - search - [Global Search Service](/search/) - secret-detection - [Detects secret leaks in the given payloads Service](/secret-detection/) - secret-revc-worker - [Secret Revocation Worker Service](/secret-revc-worker/) - secret-revocation - [Secret Revocation Service](/secret-revocation/) - security-patching - alerts - [UbuntuLivepatch](/security-patching/alerts/UbuntuLivepatch/) - linux-os - [Linux OS Patching](/security-patching/linux-os/linux-os-patching/) - [Patching Notifications](/security-patching/linux-os/notifications/) - systems - [Bastions](/security-patching/linux-os/systems/bastions/) - [Console](/security-patching/linux-os/systems/console/) - [Deploy](/security-patching/linux-os/systems/deploy/) - [Gitaly](/security-patching/linux-os/systems/gitaly/) - [GKE](/security-patching/linux-os/systems/gke/) - [HAProxy](/security-patching/linux-os/systems/haproxy/) - [Patroni](/security-patching/linux-os/systems/patroni/) - [PGBouncer](/security-patching/linux-os/systems/pgbouncer/) - [Redis](/security-patching/linux-os/systems/redis/) - [Runner Managers](/security-patching/linux-os/systems/runner-managers/) - sentry - [Monitoring Service](/sentry/) - [Troubleshooting](/sentry/sentry/) - service\\_desk - [Debugging Service Desk](/service_desk/) - sidekiq - alerts - [Title: SidekiqQueueTooLarge](/sidekiq/alerts/SidekiqQueueTooLarge/) - [Disabling Sidekiq workers](/sidekiq/disabling-a-worker/) - [Sidekiq Background Jobs Service](/sidekiq/) - [Pull mirror overdue queue is too large](/sidekiq/large-pull-mirror-queue/) - [Sidekiq queue migration](/sidekiq/queue-migration/) - [sharding](/sidekiq/sharding/) - [sidekiq\\_error\\_rate\\_high](/sidekiq/sidekiq_error_rate_high/) - [Sidekiq Concurrency Limit](/sidekiq/sidekiq-concurrency-limit/) - [Poking around at sidekiq's running state](/sidekiq/sidekiq-inspection/) - [Sidekiq queue no longer being processed](/sidekiq/sidekiq-queue-not-being-processed/) - [`sidekiq\\_queueing` apdex violation](/sidekiq/sidekiq-queueing-apdex/) - [Sidekiq SLIs](/sidekiq/sidekiq-slis/) - [A survival guide for SREs to working with Sidekiq at GitLab](/sidekiq/sidekiq-survival-guide-for-sres/) - [Exporting projects silently](/sidekiq/silent-project-exports/) - spamcheck - [Spamcheck Service](/spamcheck/) - stackdriver - [Stackdriver Metrics Service](/stackdriver/) - staging-ref - [GET Monitoring Setup](/staging-ref/get-monitoring-setup/) - [Staging ref](/staging-ref/) - storage - fs - zfs - zlonk - [Zlonk Service](/storage/fs/zfs/zlonk/) - switchboard - [Switchboard Service](/switchboard/) - teleport -",
      "<2-hop>\n\n[Geo Patroni Cluster Management](/patroni/geo-patroni-cluster/) - [gitlab-com-wale-backups](/patroni/gitlab-com-wale-backups/) - [gitlab-com-walg-backups](/patroni/gitlab-com-walg-backups/) - [Postgres (Patroni) Service](/patroni/) - [Log analysis on PostgreSQL, Pgbouncer, Patroni and consul Runbook](/patroni/log_analysis/) - [Making a manual clone of the DB for the data team](/patroni/manual_data_team_clone/) - [Mapping Postgres Statements, Slowlogs, Activity Monitoring and Traces](/patroni/mapping_statements/) - [OS Upgrade Reference Architecture](/patroni/os_upgrade_reference_architecture/) - [Patroni Cluster Management](/patroni/patroni-management/) - [performance-degradation-troubleshooting](/patroni/performance-degradation-troubleshooting/) - [pg\\_collect\\_query\\_data](/patroni/pg_collect_query_data/) - [Postgresql minor upgrade](/patroni/pg_minor_upgrade/) - [Pg\\_repack using gitlab-pgrepack](/patroni/pg_repack/) - [`pg\\_xid\\_wraparound` Saturation Alert](/patroni/pg_xid_wraparound_alert/) - [`pg\\_txid\\_xmin\\_age` Saturation Alert](/patroni/pg_xid_xmin_age_alert/) - [pg-ext-manager](/patroni/pg-ext-manager/) - [PostgreSQL HA](/patroni/pg-ha/) - [pgbadger Runbook](/patroni/pgbadger_report/) - [Postgresql troubleshooting](/patroni/postgres/) - [postgres\\_exporter](/patroni/postgres_exporter/) - [GitLab application-side reindexing](/patroni/postgres-automatic-reindexing/) - [postgres-backups-verification-failures](/patroni/postgres-backups-verification-failures/) - [postgres-checkup](/patroni/postgres-checkup/) - [Dealing with Data Corruption in PostgreSQL](/patroni/postgres-data-corruption/) - [Diagnosing long running transactions](/patroni/postgres-long-running-transaction/) - [Postgres maintenance](/patroni/postgres-maintenance/) - [Postgresql](/patroni/postgresql/) - [PostgreSQL Backups: WAL-G](/patroni/postgresql-backups-wale-walg/) - [postgresql-buffermapping-lwlock-contention](/patroni/postgresql-buffermapping-lwlock-contention/) - [PostgreSQL](/patroni/postgresql-disk-space/) - [postgresql-locking](/patroni/postgresql-locking/) - [How to evaluate load from queries](/patroni/postgresql-query-load-evaluation/) - [PostgreSQL Trigram Indexes](/patroni/postgresql-rebuild-trigram-indexes/) - [Adding a PostgreSQL replica](/patroni/postgresql-replica/) - [Credential rotation](/patroni/postgresql-role-credential-rotation/) - [PostgreSQL subtransactions](/patroni/postgresql-subtransactions/) - [PostgreSQL VACUUM](/patroni/postgresql-vacuum/) - [Primary Database Node CPU Saturation Analysis](/patroni/primary_db_node_cpu_saturation/) - [Primary Database Node WAL Generation Saturation Analysis](/patroni/primary_db_node_wal_generation_saturation/) - [How to provision the benchmark environment](/patroni/provisioning_bench_env/) - [SQL query analysis and optimization for Postgres](/patroni/query-analysis/) - [Rails SQL Apdex alerts](/patroni/rails-sql-apdex-slow/) - [Rotating Rails' PostgreSQL password](/patroni/rotating-rails-postgresql-password/) - [Scale Down Patroni](/patroni/scale-down-patroni/) - [Scale Up Patroni](/patroni/scale-up-patroni/) - [High-level performance analysis and troubleshooting of a Postgres node](/patroni/single-node-high-level/) - [Handling Unhealthy Patroni Replica](/patroni/unhealthy_patroni_node_handling/) - [Roles/Users grants and permission Runbook](/patroni/user_grants_permission/) - [using-wale-gpg](/patroni/using-wale-gpg/) - [Postgres wait events analysis (a.k.a. Active Session History; ASH dashboard)](/patroni/wait-events-analisys/) - [WAL logs analysis](/patroni/wal_log_analysis/) - [Zero Downtime Postgres Database Decomposition](/patroni/zero-downtime-database-decomposition/) - patroni-ci - [CI Postgres (Patroni) Service](/patroni-ci/) - [Recovering from CI Patroni cluster lagging too much or becoming completely broken](/patroni-ci/recovering_patroni_ci_intense_lagging_or_replication_stopped/) - patroni-registry - [Registry Postgres (Patroni) Service](/patroni-registry/) - patroni-sec - [Sec Postgres (Patroni) Service](/patroni-sec/) - pd-event-logger-7760xa - [events](/pd-event-logger-7760xa/events/) - [Logs PagerDuty incident events to ElasticSearch Service](/pd-event-logger-7760xa/) - pgbouncer - alerts - [component\\_saturation\\_slo\\_out\\_of\\_bounds:pgbouncer\\_single\\_core](/pgbouncer/alerts/pgbouncer_single_core/) - [PGBouncer Primary Database Pool Service](/pgbouncer/) - [patroni-consul-postgres-pgbouncer-interactions](/pgbouncer/patroni-consul-postgres-pgbouncer-interactions/) - [Add a new PgBouncer instance](/pgbouncer/pgbouncer-add-instance/) - [pgbouncer-applications](/pgbouncer/pgbouncer-applications/) - [PgBouncer connection management and troubleshooting](/pgbouncer/pgbouncer-connections/) - [Removing a PgBouncer instance](/pgbouncer/pgbouncer-remove-instance/) - [Sidekiq or Web/API is using most of its PgBouncer connections](/pgbouncer/pgbouncer-saturation/) - [Pgbouncer Service](/pgbouncer/service-pgbouncer/) - pgbouncer-ci - [CI PGBouncer Primary Database Pool Service](/pgbouncer-ci/) - pgbouncer-registry - [Registry PGBouncer Primary Database Pool Service](/pgbouncer-registry/) - pgbouncer-sec - [Sec PGBouncer Primary Database Pool Service](/pgbouncer-sec/) - pingdom - [Pingdom Service](/pingdom/) - [Pingdom](/pingdom/pingdom/) - pipeline-validation-service - [Pipeline Validation Service](/pipeline-validation-service/) - plantuml - [PlantUML Service](/plantuml/) - [PlantUML](/plantuml/readiness/) - portal-poc - [Experimental Engineering Portal Service](/portal-poc/) - postgres-archive - [Postgres DR Archive Service](/postgres-archive/) - [Postgres archive replicas](/postgres-archive/postgres-dr-replicas/) - postgres-dr-delayed - [Postgres DR Delayed Replica Service](/postgres-dr-delayed/) - [Postgres Replicas](/postgres-dr-delayed/postgres-dr-replicas/) - product\\_analytics - [Product Analytics ClickHouse Failure Remediation, Backup & Restore Process](/product_analytics/clickhouse-backup-restore/) - [Product Analytics Service](/product_analytics/) - [Product Analytics Kubernetes Architecture](/product_analytics/k8s-architecture/) - [Product Analytics SSL Troubleshooting](/product_analytics/ssl-troubleshooting/) - psql-timings - [PSQL Timings Service](/psql-timings/) - pubsub - [Pubsub for Logging Service](/pubsub/) - [PubSub Queuing Rate Increasing](/pubsub/pubsub-queing/) - pvs - [Pvs Service](/pvs/) - rate-limiting - [index](/rate-limiting/) - redis - [Blocking individual IPs using Redis and Rack Attack](/redis/ban-an-IP-with-redis/) - [Clearing sessions for anonymous users](/redis/clear_anonymous_sessions/) - [Persistent Redis Service](/redis/) - [Redis on Kubernetes](/redis/kubernetes/) - [Memory space analysis with cupcake-rdb](/redis/memory-space-analysis-cupcake-rdb/) - [Provisioning Redis Cluster](/redis/provisioning-redis-cluster/) - [Troubleshooting](/redis/redis/) - [Redis Cluster](/redis/redis-cluster/) - [Functional Partitioning](/redis/redis-functional-partitioning/) - [Redis RDB Snapshots](/redis/redis-rdb-snapshots/) - [Redis-Sidekiq catchall workloads reduction](/redis/redis-sidekiq-catchall-workloads-reduction/) - [A survival guide for SREs to working with Redis at GitLab](/redis/redis-survival-guide-for-sres/) - [Scaling Redis Cluster](/redis/scaling-redis-cluster/) - redis-cluster-cache - [Redis Cluster Cache Service](/redis-cluster-cache/) - [Removing cache entries from Redis](/redis-cluster-cache/remove-cache-entries/) - redis-cluster-chat-cache - [Redis Cluster Chat Cache Service](/redis-cluster-chat-cache/) - redis-cluster-database-lb - [Redis Cluster Database Loadbalancing Service](/redis-cluster-database-lb/) - redis-cluster-feature-flag - [Redis Cluster Feature Flag Service](/redis-cluster-feature-flag/) - redis-cluster-queues-meta - [Redis Cluster Queues Meta Service](/redis-cluster-queues-meta/) - redis-cluster-ratelimiting - [Redis Cluster RateLimiting Service](/redis-cluster-ratelimiting/) - redis-cluster-registry - [Redis Cluster Registry Service](/redis-cluster-registry/) - redis-cluster-repo-cache - [Redis Cluster Repo Cache Service](/redis-cluster-repo-cache/) - redis-cluster-sessions - [Redis Cluster Sessions Service](/redis-cluster-sessions/) - redis-cluster-shared-state - [Redis Cluster SharedState Service](/redis-cluster-shared-state/) - redis-feature-flag - [Redis-feature-flag Service](/redis-feature-flag/) - redis-pubsub - [Redis Pub/Sub Service](/redis-pubsub/) - redis-ratelimiting - [Redis-ratelimiting Service](/redis-ratelimiting/) - redis-registry-cache - [Redis Registry Cache Service](/redis-registry-cache/) - redis-sessions - [Redis Sessions Service](/redis-sessions/) - redis-sidekiq - [Redis Sidekiq Service](/redis-sidekiq/) - redis-tracechunks - [Redis TraceChunks Service](/redis-tracechunks/) - registry - alerts - [ContainerRegistryDBLoadBalancerReplicaPoolSize](/registry/alerts/ContainerRegistryDBLoadBalancerReplicaPoolSize/) - [ContainerRegistryNotifications](/registry/alerts/ContainerRegistryNotifications/) - [PatroniRegistryServiceDnsLookupsApdexSLOViolation](/registry/alerts/PatroniRegistryServiceDnsLookupsApdexSLOViolation/) - [Database Connection Pool Saturation](/registry/app-db-conn-pool-saturation/) - [Container Registry Batched Background Migrations](/registry/background-migrations/) - [Container Registry CDN](/registry/cdn/) - [Container Registry Database Index Bloat](/registry/db-index-bloat/) - [Container Registry Database Load Balancing](/registry/db-load-balancing/) - [Container Registry database post-deployment migrations](/registry/db-post-deployment-migrations/) - [gitlab-registry](/registry/gitlab-registry/) - [Container Registry Service](/registry/) - [High Number of Overdue Online GC Tasks](/registry/online-gc-high-overdue-tasks/) - [High Number of Pending or Failed Outgoing Webhook Notifications](/registry/webhook-notifications/) - release-management - [High build pressure](/release-management/build_pressure/) - [High deploy pressure](/release-management/deploy_pressure/) - release-tooling - [Delivery Release Tooling Service](/release-tooling/) - renovate - [Renovate at GitLab: Current Implementation Documentation](/renovate/) - repository-mirroring - [Repository Mirroring Service](/repository-mirroring/) - [Mirror Updates Silently Failing](/repository-mirroring/mirror-updates-silently-failing/) - [Pull Mirroring Timeout with Large LFS Files](/repository-mirroring/pull-mirroring-timeout-with-large-lfs-files/) - runway - [Restore/Backup Runway-managed Cloud SQL](/runway/cloudsql_backup_restore/) - [Cloud SQL Restore Pipeline Troubleshooting](/runway/cloudsql_restore_pipeline_troubleshooting/) - [Runway Platform Service](/runway/) - [Privileged Access Management](/runway/privileged_access_management/) - runway-db-example - [Example Runway-managed Postgres Service](/runway-db-example/) - runway-redis-example - [Example Runway-managed Redis Service](/runway-redis-example/) - sast-service - [SAST Scanner Service for SAST in the IDE](/sast-service/) - search - [Global Search Service](/search/) - secret-detection - [Detects secret leaks in the given payloads Service](/secret-detection/) - secret-revc-worker - [Secret Revocation Worker Service](/secret-revc-worker/) - secret-revocation - [Secret Revocation Service](/secret-revocation/) - security-patching - alerts - [UbuntuLivepatch](/security-patching/alerts/UbuntuLivepatch/) - linux-os - [Linux OS Patching](/security-patching/linux-os/linux-os-patching/) - [Patching Notifications](/security-patching/linux-os/notifications/) - systems - [Bastions](/security-patching/linux-os/systems/bastions/) - [Console](/security-patching/linux-os/systems/console/) - [Deploy](/security-patching/linux-os/systems/deploy/) - [Gitaly](/security-patching/linux-os/systems/gitaly/) - [GKE](/security-patching/linux-os/systems/gke/) - [HAProxy](/security-patching/linux-os/systems/haproxy/) - [Patroni](/security-patching/linux-os/systems/patroni/) - [PGBouncer](/security-patching/linux-os/systems/pgbouncer/) - [Redis](/security-patching/linux-os/systems/redis/) - [Runner Managers](/security-patching/linux-os/systems/runner-managers/) - sentry - [Monitoring Service](/sentry/) - [Troubleshooting](/sentry/sentry/) - service\\_desk - [Debugging Service Desk](/service_desk/) - sidekiq - alerts - [Title: SidekiqQueueTooLarge](/sidekiq/alerts/SidekiqQueueTooLarge/) - [Disabling Sidekiq workers](/sidekiq/disabling-a-worker/) - [Sidekiq Background Jobs Service](/sidekiq/) - [Pull mirror overdue queue is too large](/sidekiq/large-pull-mirror-queue/) - [Sidekiq queue migration](/sidekiq/queue-migration/) - [sharding](/sidekiq/sharding/) - [sidekiq\\_error\\_rate\\_high](/sidekiq/sidekiq_error_rate_high/) - [Sidekiq Concurrency Limit](/sidekiq/sidekiq-concurrency-limit/) - [Poking around at sidekiq's running state](/sidekiq/sidekiq-inspection/) - [Sidekiq queue no longer being processed](/sidekiq/sidekiq-queue-not-being-processed/) - [`sidekiq\\_queueing` apdex violation](/sidekiq/sidekiq-queueing-apdex/) - [Sidekiq SLIs](/sidekiq/sidekiq-slis/) - [A survival guide for SREs to working with Sidekiq at GitLab](/sidekiq/sidekiq-survival-guide-for-sres/) - [Exporting projects silently](/sidekiq/silent-project-exports/) - spamcheck - [Spamcheck Service](/spamcheck/) - stackdriver - [Stackdriver Metrics Service](/stackdriver/) - staging-ref - [GET Monitoring Setup](/staging-ref/get-monitoring-setup/) - [Staging ref](/staging-ref/) - storage - fs - zfs - zlonk - [Zlonk Service](/storage/fs/zfs/zlonk/) - switchboard - [Switchboard Service](/switchboard/) - teleport -"
    ],
    "ground_truths": [
      "Patroni Cluster Management is essential for managing PostgreSQL clusters, ensuring high availability and automated failover. It includes various services such as the Postgres (Patroni) Service and tools for log analysis, performance troubleshooting, and database maintenance. Secret detection, on the other hand, is crucial for identifying and mitigating risks associated with sensitive information leaks in the database. The integration of secret detection within the Patroni management framework helps maintain security by ensuring that sensitive credentials are not exposed in logs or configurations, thereby enhancing the overall security posture of the PostgreSQL environment."
    ]
  },
  {
    "question": "How do you delete cache keys on GitLab.com using Redis, and what steps are involved in obtaining and deleting those keys?",
    "answer": "To delete cache keys on GitLab.com using Redis, the process is divided into two main steps. First, you need to obtain the keys to be deleted, which can be done on a secondary Redis instance. You can run a Ruby script that scans for keys matching a specific pattern, such as 'cache:gitlab:license_key*', and writes them to a temporary file. The script uses the Redis 'scan' command to iteratively find keys without overwhelming the server. Second, once you have the list of keys, you can delete them from the primary Redis instance. This is done by reading the keys from the temporary file and using the 'expire' command to remove them. It's important to ensure that the keys are correctly formatted, as the Gitlab::Redis::Cache automatically adds the 'cache:gitlab:' namespace, which needs to be stripped before deletion.",
    "contexts": [
      "<1-hop>\n\nfor pipelined operations during resharding. The volume can be tracked on logs under 2 groups of fields: 1. `json.redis_<functional shard>_allowed_cross_slot_calls` shows the volume of [allowed](https://gitlab.com/gitlab-org/gitlab/-/blob/92312944bb8a827b5d00509a5d07d0fe8ee4955d/lib/gitlab/instrumentation/redis_cluster_validator.rb#L205) cross-slot calls (i.e. commands are accounted for and are running on non-cluster-based Redis) 2. `json.redis_<functional_shard>_cross_slot_calls` shows the volume of cross-slot commands (not accounted for or running on Redis Cluster) ## Troubleshooting [Section titled “Troubleshooting”](#troubleshooting) ### What is the state of the cluster? [Section titled “What is the state of the cluster?”](#what-is-the-state-of-the-cluster) Some commands to understand the overall state: - `CLUSTER NODES` - `CLUSTER INFO` - `CLUSTER SLAVES` `CLUSTER NODES` provides a quick summary of node information. Look out for the connection state of each node (look out for the `connected` keyword) and the number of masters. ``` 07c37dfeb235213a872192d90877d0cd55635b91 127.0.0.1:30004@31004,,shard-id=69bc080733d1355567173199cff4a6a039a2f024 slave e7d1eecce10fd6bb5eb35b9f99a514335d9ba9ca 0 1426238317239 4 connected 67ed2db8d677e59ec4a4cefb06858cf2a1a89fa1 127.0.0.1:30002@31002,,shard-id=114f6674a35b84949fe567f5dfd41415ee776261 master - 0 1426238316232 2 connected 5461-10922 292f8b365bb7edb5e285caf0b7e6ddc7265d2f4f 127.0.0.1:30003@31003,,shard-id=fdb36c73e72dd027bc19811b7c219ef6e55c550e master - 0 1426238318243 3 connected 10923-16383 6ec23923021cf3ffec47632106199cb7f496ce01 127.0.0.1:30005@31005,,shard-id=114f6674a35b84949fe567f5dfd41415ee776261 slave 67ed2db8d677e59ec4a4cefb06858cf2a1a89fa1 0 1426238316232 5 connected 824fe116063bc5fcf9f4ffd895bc17aee7731ac3 127.0.0.1:30006@31006,,shard-id=fdb36c73e72dd027bc19811b7c219ef6e55c550e slave 292f8b365bb7edb5e285caf0b7e6ddc7265d2f4f 0 1426238317741 6 connected e7d1eecce10fd6bb5eb35b9f99a514335d9ba9ca 127.0.0.1:30001@31001,,shard-id=69bc080733d1355567173199cff4a6a039a2f024 myself,master - 0 0 1 connected 0-5460 ``` `CLUSTER INFO` gives a fast overview of the state. If `cluster_state:ok` and `cluster_slots_ok:16384` are present, the cluster is likely to be fine. ``` ➜ ~ redis-cli cluster info cluster_state:ok cluster_slots_assigned:16384 cluster_slots_ok:16384 cluster_slots_pfail:0 cluster_slots_fail:0 cluster_known_nodes:9 cluster_size:3 ``` `CLUSTER SLAVES <node id>` provides shard-based information when wanting to drill down to a specific master node. ``` ➜ ~ redis-cli -p 7001 cluster slaves 97d7d00217fb53b9f4f74763f04be50c536dc470 1) \"4ccb0580c355ff37d54665f7f60fe00a5ee9a6c9 127.0.0.1:7202@17202,localhost slave 97d7d00217fb53b9f4f74763f04be50c536dc470 0 1678417677554 8 connected\" 2) \"03f7a03ea54ad3d0f8e079e1e63422ec0735046f 127.0.0.1:7203@17203,localhost slave 97d7d00217fb53b9f4f74763f04be50c536dc470 0 1678417677000 8 connected\"` ``` To avoid an erroneous single-sided view, the command should be performed on at least 1 nodes from each shards. For slot health, use `CLUSTER SLOTS` or `CLUSTER SHARDS`. ### How to initialize a new cluster [Section titled “How to initialize a new cluster”](#how-to-initialize-a-new-cluster) To initialize a cluster, see the [official Redis guide](https://redis.io/docs/management/scaling/#create-a-redis-cluster). An example of how previous clusters were set up can be found in [here](https://gitlab.com/gitlab-com/gl-infra/scalability/-/issues/2210#note_1287069028). ### How to recover from all nodes going down [Section titled “How to recover from all nodes going down”](#how-to-recover-from-all-nodes-going-down) As the [gitlab-redis-cluster cookbook](https://gitlab.com/gitlab-cookbooks/gitlab-redis-cluster/-/blob/3dd0f008677d7e85121fe659428adcfc1277e904/attributes/default.rb#L14) defines a `cluster-config-file`, the nodes will attempt to recreate the original cluster topology using previously stored information from the file after a restart. ### How to force promotion of a replica in an emergency where Redis cannot heal itself [Section titled “How to force promotion of a replica in an emergency where Redis cannot heal itself”](#how-to-force-promotion-of-a-replica-in-an-emergency-where-redis-cannot-heal-itself) There is a sidecar process in each VM which checks the cluster health and forces a failover. See the [originating issue](https://gitlab.com/gitlab-com/gl-infra/scalability/-/issues/2140) for more information. In the event where the sidecar processes are not working, the SRE/EOC will need to run the [`CLUSTER FAILOVER`](https://redis.io/commands/cluster-failover/) command on the desired slave node to promote that node into a master. Run the following command on the desired node: ``` sudo gitlab-redis-cli CLUSTER FAILOVER TAKEOVER ``` ### How to do online resharding (with warnings)? [Section titled “How to do online resharding (with warnings)?”](#how-to-do-online-resharding-with-warnings) See the [official Redis guide](https://redis.io/docs/management/scaling/#reshard-the-cluster). ### How do we rotate passwords in the ACL list? [Section titled “How do we rotate passwords in the ACL list?”](#how-do-we-rotate-passwords-in-the-acl-list) TODO [Edit page](https://gitlab.com/gitlab-com/runbooks/-/edit/master/docs/redis/redis-cluster.md) [Previous Troubleshooting](/redis/redis/) [Next Functional Partitioning](/redis/redis-functional-partitioning/)",
      "<2-hop>\n\nStep 2: delete the keys](#step-2-delete-the-keys) ## On this page - [Overview](#_top) - [Step 1: obtain the keys to be deleted](#step-1-obtain-the-keys-to-be-deleted) - [Step 2: delete the keys](#step-2-delete-the-keys) # Removing cache entries from Redis Cache invalidation is one of the [hard things](https://martinfowler.com/bliki/TwoHardThings.html). Sometimes we have incidents like [#5478](https://gitlab.com/gitlab-com/gl-infra/production/-/issues/5478) where we end up with invalid data in the cache, and no convenient way to clear it. This document describes an approach for deleting a specified set of cache keys on GitLab.com without consuming excessive Redis resources. This approach is split into two phases: 1. Obtain the keys to be deleted (against a secondary) 2. Delete the specified keys (against the primary) By doing this, we gain a few benefits: 1. We perform as few operations on the primary as necessary. Secondaries do not receive application traffic, and so have more headroom and can tolerate being blocked briefly. 2. We can retain a list of deleted keys for later inspection - for instance, if a user reports an issue, we can check if their cache key was in the list. 3. Obtaining the keys to be deleted may be an iterative, exploratory process. We do not want to conflate this with data deletion, which should ideally be as simple as possible. (In the future we may move to having [version-based cache invalidation](https://gitlab.com/gitlab-com/gl-infra/reliability/-/issues/9815), where this will be simpler. One example is the way it’s possible to [invalidate the Markdown cache](https://docs.gitlab.com/ee/administration/invalidate_markdown_cache.html) - which is in Postgres, not Redis - via the API.) ## Step 1: obtain the keys to be deleted [Section titled “Step 1: obtain the keys to be deleted”](#step-1-obtain-the-keys-to-be-deleted) **On a secondary**, we can run a Ruby script like the below. `REDIS_PASSWORD` is provided as an environment variable. In this example, we’re looking for keys of the form `cache:gitlab:license_key*`, but the general approach will be the same no matter the pattern. ``` require 'redis' pattern = \"cache:gitlab:license_key*\" output = File.open('/tmp/keys-to-delete.txt', 'w') redis = Redis.new(:url => \"redis://#{ENV['REDIS_PASSWORD']}@127.0.0.1\") cursor = '0' loop do cursor, keys = redis.scan(cursor, match: pattern, count: 100000) if keys.count > 0 puts \"Writing #{keys.count}\" keys.each { |key| output.write(key + \"\\n\") } end puts cursor break if cursor == '0' end ``` ## Step 2: delete the keys [Section titled “Step 2: delete the keys”](#step-2-delete-the-keys) This can be run on the console node as `Gitlab::Redis::Cache` will connect to the primary by default. Make sure to copy `/tmp/keys-to-delete.txt` to the console node before starting. It sleeps for a second after every 10 000 deletions. In most cases there should not be many tens of thousands of deletions anyway. ``` lines = File.readlines('/tmp/keys-to-delete.txt') count = 0 Gitlab::Redis::Cache.with do |redis| lines.each do |line| line.rstrip! # Gitlab::Redis::Cache automatically adds the cache:gitlab: namespace, so # we have to remove it. Otherwise we will try to delete keys of the form # cache:gitlab:cache:gitlab:... line.gsub!(/^cache:gitlab:/, '') redis.expire(line, 0) count += 1 if (count % 10000 == 0) puts \"count is #{count}, sleeping...\" sleep 1 end end end ``` [Edit page](https://gitlab.com/gitlab-com/runbooks/-/edit/master/docs/redis-cluster-cache/remove-cache-entries.md) [Previous Redis Cluster Cache Service](/redis-cluster-cache/) [Next Redis Cluster Chat Cache Service](/redis-cluster-chat-cache/)"
    ],
    "ground_truths": [
      "To delete cache keys on GitLab.com using Redis, the process is divided into two main steps. First, you need to obtain the keys to be deleted, which can be done on a secondary Redis instance. You can run a Ruby script that scans for keys matching a specific pattern, such as 'cache:gitlab:license_key*', and writes them to a temporary file. The script uses the Redis 'scan' command to iteratively find keys without overwhelming the server. Second, once you have the list of keys, you can delete them from the primary Redis instance. This is done by reading the keys from the temporary file and using the 'expire' command to remove them. It's important to ensure that the keys are correctly formatted, as the Gitlab::Redis::Cache automatically adds the 'cache:gitlab:' namespace, which needs to be stripped before deletion."
    ]
  },
  {
    "question": "How does the RDB format affect data storage in Redis, especially in relation to the 15-minute write interval and potential data loss during node failures?",
    "answer": "The RDB format in Redis affects data storage by saving data to disk every 900 seconds (15 minutes) as long as at least one key has changed. This means that if all three nodes fail at once, there is a risk of losing up to 15 minutes of writes. In contrast, the cache clusters do not regularly write to disk, which means that if all nodes fail simultaneously, the entire cache will be wiped. This is considered acceptable as the cache will be refilled on demand, but it highlights the transient nature of the data stored in Redis.",
    "contexts": [
      "<1-hop>\n\nredis will require some more memory for its datastructures. Generally, the key size will be on that order of magnitude. The current `maxmemory` in Redis-cache is set to `60 GiB`. Depending on the numbers you get, the ratio of each compared to the `maxmemory` can give you an idea of how significant of an impact your change might introduce. **Please remember to delete the RDB file once you’re done!** Terminal window ``` rm $RDB_FILE_PATH/dump.rdb ``` #### Please remember to delete the `pcap` file immediately after performing the analysis [Section titled “Please remember to delete the pcap file immediately after performing the analysis”](#please-remember-to-delete-the-pcap-file-immediately-after-performing-the-analysis) ### CPU profiling [Section titled “CPU profiling”](#cpu-profiling) CPU profiles are useful for diagnosing CPU saturation. Especially since redis is (mostly) single-threaded, CPU can become a bottleneck. A profile can be captured via perf: Terminal window ``` sudo mkdir -p /var/log/perf-$USER cd /var/log/perf-$USER sudo chown $USER:$USER . sudo perf record -p $(pidof redis-server) -F 497 --call-graph dwarf --no-inherit -- sleep 300 sudo perf script --header | gzip > stacks.$(hostname).$(date --iso-8601=seconds).gz sudo rm perf.data ``` This will sample stacks at ~500hz. Those stack traces can then be downloaded and analyzed with [flamescope](https://github.com/Netflix/flamescope) or [flamegraph](https://github.com/brendangregg/FlameGraph). Terminal window ``` scp $host:/var/log/perf-\\*/stacks.\\*.gz . cat stacks.$host.$time.gz | gunzip - | ~/code/FlameGraph/stackcollapse-perf.pl | ~/code/FlameGraph/flamegraph.pl > flamegraph.svg ``` ### Accessing Redis via the Rails console [Section titled “Accessing Redis via the Rails console”](#accessing-redis-via-the-rails-console) Sometimes you may wish to query a production Redis server from a Rails console. Either because you don’t have sufficient access to run `redis-cli`, or because you are running a query that is easier expressed in Ruby than with `redis-cli`. You probably want to use a Redis secondary to do this. This is how you instantiate a Ruby Redis client for a secondary: ``` redis = Redis.new(Gitlab::Redis::SharedState.params.merge(role: :slave)) ``` Substitute `Cache`,`Queues`, `TraceChunks`, `RateLimiting`, or `Sessions` for ‘SharedState’ to get a client for the respective Redis instance. ### packetbeat [Section titled “packetbeat”](#packetbeat) TODO <https://github.com/elastic/beats/tree/master/packetbeat> ### Profiling the application [Section titled “Profiling the application”](#profiling-the-application) TODO e.g. rbspy, will be partially covered by <https://gitlab.com/gitlab-com/gl-infra/reliability/-/issues/6940> ## Failover and Recovery procedures [Section titled “Failover and Recovery procedures”](#failover-and-recovery-procedures) ### Accessing the Redis console [Section titled “Accessing the Redis console”](#accessing-the-redis-console) Be extremely careful with Redis! There are commands such as KEYS or MONITOR that can lock Redis entirely without any warning. The application relies heavily on cache so locking Redis will result in an immediate downtime. Redis admin password is stored in the omnibus cookbook secrets in GKMS, and it’s deployed to gitlab config file: /etc/gitlab/gitlab.rb (this file then gets translated into multiple other config files, including redis.conf) interactive: ``` REDISCLI_AUTH=$(sudo grep ^masterauth /var/opt/gitlab/redis/redis.conf|cut -d\\\" -f2) /opt/gitlab/embedded/bin/redis-cli ``` or oneliners: ``` REDISCLI_AUTH=$(sudo grep ^masterauth /var/opt/gitlab/redis/redis.conf|cut -d\\\" -f2) /opt/gitlab/embedded/bin/redis-cli slowlog get 10 ``` ### Building a new Redis server and starting replication [Section titled “Building a new Redis server and starting replication”](#building-a-new-redis-server-and-starting-replication) NOTE: These instructions are for setting up Redis *Sentinel*: <https://redis.io/topics/sentinel> . NOT for setting up Redis *Cluster*: <https://redis.io/topics/cluster-tutorial> From time to time you may have to build (or rebuild) a redis cluster. While the omnibus documentation (<https://docs.gitlab.com/ee/administration/high_availability/redis.html>) says everything should start replicating by magic, it doesn’t in our builds because we touch /etc/gitlab/skip-autoreconfigure on redis nodes, so that restarts during upgrades can be done in a more controlled fashion across multiple nodes. So, after building the nodes, there are some manual steps to take: 1. On all nodes, `sudo gitlab-ctl reconfigure` - This will reconfigure/start up redis, but not sentinel 2. On all nodes, `sudo gitlab-ctl start sentinel` - Not sure why, but it’s minor 3. On the replicas, start replicating from the master: 1. REDISCLI\\_AUTH=$(sudo grep ^masterauth /var/opt/gitlab/redis/redis.conf|cut -d\\” -f2) 2. /opt/gitlab/embedded/bin/redis-cli 3. 127.0.0.1:6379> slaveof MASTER\\_IP 6379 4. 127.0.0.1:6379> info replication You’re now expecting the replica to report something like: ``` role:slave master_host:MASTER_IP master_port:6379 ``` If you run `info replication` on the master, you expect to see `role:master` and `connected_slaves:2` #### Discussion [Section titled “Discussion”](#discussion) Sentinel is supposed to control the replication configuration in redis.conf (the ‘slaveof’ configuration line); therefore, when omnibus creates redis.conf it really shouldn’t add that configuration line, otherwise it and sentinel would end up fighting. So new redis nodes created with omnibus installed will all think they’re master, until they’re told otherwise. We do this above, and at that point, sentinel (connected to the master) becomes aware of the replicas, and starts managing their replication status. It’s a little chicken-and-egg, and humans need to be involved. It should, however, be one-off at cluster build time. ### Ban an IP with Rails Rack Attack (which uses redis) [Section titled “Ban an IP with Rails Rack Attack (which uses redis)”](#ban-an-ip-with-rails-rack-attack-which-uses-redis) see: <https://gitlab.com/gitlab-com/runbooks/blob/master/docs/redis/ban-an-IP-with-redis.md> ### Replication issues [Section titled “Replication issues”](#replication-issues) #### Possible checks [Section titled “Possible checks”](#possible-checks) #### client-output-buffer-limit [Section titled “client-output-buffer-limit”](#client-output-buffer-limit) check Redis docs for more information: <https://raw.githubusercontent.com/antirez/redis/5.0/redis.conf> Terminal window ``` > config get client-output-buffer-limit ``` #### Checks Using Prometheus [Section titled “Checks Using Prometheus”](#checks-using-prometheus) ##### Redis Primaries [Section titled “Redis Primaries”](#redis-primaries) List the Redis primaries using: - [`redis_master_repl_offset > 0`](https://prometheus.gitlab.com/graph?g0.range_input=1h&g0.expr=redis_master_repl_offset%20%3E%200%20&g0.tab=1) ##### Redis Secondaries [Section titled “Redis Secondaries”](#redis-secondaries) List the Redis secondaries using: - [`redis_slave_info`](https://prometheus.gitlab.com/graph?g0.range_input=1h&g0.expr=redis_slave_info&g0.tab=1) ##### Redis Replication Lag [Section titled “Redis Replication Lag”](#redis-replication-lag) Replication lag indicates that the Redis secondaries are struggling to keep up with the changes on the primary. This may be due to the rate of changes on the primary being too high, or the secondaries being under too much load to keep up. Replication lag is measured in bytes in the replication stream. <https://dashboards.gitlab.net/dashboard/db/andrew-redis?panelId=13&fullscreen&orgId=1> ##### Redis Replication Events [Section titled “Redis Replication Events”](#redis-replication-events) - Check the Redis Replication Events dashboard to see if Redis is frequently failing over. This may indicate replication issues. <https://dashboards.gitlab.net/dashboard/db/andrew-redis?panelId=14&fullscreen&orgId=1> - Master switch events are logged in the redis log, for example: Terminal window ``` $ zcat /var/log/gitlab/redis/@400000005e58927932f8744c.s | grep -i master 2020-02-27_11:35:39.68552 26796:M 27 Feb 2020 11:35:39.685 * MASTER MODE enabled (user request from 'id=267 addr=10.224.8.122:51379 fd=17 name= age=58518 idle=0 flags=x db=0 sub=0 psub=0 multi=3 qbuf=140 qbuf-free=32628 obl=36 oll=0 omem=0 events=r cmd=exec') ``` #### Redis Sentinel [Section titled “Redis Sentinel”](#redis-sentinel) NOTE: At the moment of writing,",
      "<2-hop>\n\nresults may vary (it will be deeply dependent on the specific key and how the application behaves). For tracechunks we may lose the output of some CI jobs. On the non-cache clusters, the data is saved to disk (RDB format) every 900 seconds (15 minutes) as long as at least 1 key has changed. In the event that all 3 nodes fail at once and the in-memory contents is lost, we may lose up to 15 minutes of writes. As noted elsewhere in this document, the cache clusters do not regularly write to disk (only indirectly as part of a replication resynchronization). If all 3 nodes fail at once, the entire cache will be wiped; this is not ideal but acceptable as it will be refilled on demand. For ratelimiting, the data has only short term usefulness anyway (generally 1 minute, with some up to 3 minutes) so complete loss is not significant. ## What do we store? [Section titled “What do we store?”](#what-do-we-store) <https://gitlab.com/gitlab-com/gl-infra/scalability/-/issues/419> contains some summary analysis of the keyspace across the persistent and cache instances, as at July 2020. This will change over time as the code base evolves, but the link provides some indication what we’re storing (it’s not as wide a range of things as you might expect in the persistent instance). The data stored in the sidekiq instances is not really under our control (it’s whatever sidekiq needs to do its job). Some details on that are available in [Sidekiq Survival Guide for SREs](../../sidekiq/sidekiq-survival-guide-for-sres). The data in the tracechunks instance is exclusively the output of CI jobs on its way into Object Storage (received by and API request, written into Redis, and a Sidekiq job immediately scheduled to asynchronously write it to Object Storage); while important, it is also extremely transient, and under normal circumstances there should be no significant build up of data in this instance. Any such build up implies a problem (Sidekiq not processing, perhaps?) and so we have particularly low alert thresholds for memory saturation on this instance. At the time we chose to split this instance from the primary persistent (shared state) instance (mid 2021), CI trace chunks were responsible for roughly 60% of the data throughput into/out of the shared state redis, and 16% of Redis calls. The data in the ratelimiting instance is a set of keys identifying actors (typically users, IP addresses, or in some cases projects) and activities, with the value being the count of usage in the current period (the period is also encoded into the key name). TTLs are used to expire these automatically so there’s no manual cleanup by clients, it is automatic and internal to Redis. The data in the sessions instance is exclusively that related to web sessions. ## Clients [Section titled “Clients”](#clients) Most of the clients are Ruby, specifically Rails code on the web, api, git, and sidekiq nodes. Workhorse (in Go) also [uses](https://gitlab.com/gitlab-org/gitlab-workhorse/blob/master/README.md#redis) Redis to do long polling for CI build requests. Rails uses the generic [connection\\_pool](https://github.com/mperham/connection_pool) to maintain long running connections which are used by threads/workers as necessary, which is particularly important as redis is typically expected to be very fast and low latency. See [High Availability](#high-availability) for some comments regarding connections via sentinels. ## What about redis cluster? [Section titled “What about redis cluster?”](#what-about-redis-cluster) [Redis Cluster](https://redis.io/topics/cluster-spec) is a Redis feature that lets you horizontally shard data across multiple machines. If any one of our Redis clusters grows too large to fit in memory on a single machine or such that the single-threaded CPU becomes a hard limit, then Redis Cluster is a possible mitigation. Manually sharding the data is an alternative approach, e.g. having more than one cache cluster and dividing the types of keys up in some way using application controlled logic, or splitting the sidekiq processing onto multiple clusters. Neither option is low effort. See the [Redis Cluster documentation for more details](../../redis/redis-cluster). See: 1. <https://gitlab.com/gitlab-com/gl-infra/reliability/-/issues/9788> 2. <https://gitlab.com/gitlab-com/gl-infra/scalability/-/issues/305> ## Maintanence [Section titled “Maintanence”](#maintanence) ### Reconfigure [Section titled “Reconfigure”](#reconfigure) In order to apply config changes, we need to run a `sudo gitlab-ctl reconfigure`. However, this operation requires coordination, since it will usually restart the redis process. In order to ensure we remain highly available, this operation should only be applied to redis replicas. In order to apply it to a primary, a failover should first be performed, turning it into a replica. This process is automated via a script in the `runbooks` repository: ``` scripts/omnibus-redis-reconfigure.sh gstg redis-cache # if the instance is using omnibus-gitlab scripts/redis-reconfigure.sh gstg redis-cache # if the instance is using the gitlab-redis cookbook ``` For Redis Cluster, the reconfiguration process is similar. But due to the varied cluster topologies, fetch the list of node FQDNs by run the following `knife` command in [chef-repo](https://gitlab.com/gitlab-com/gl-infra/chef-repo/): ``` knife search -i 'roles:<ENV>-base-db-redis-cluster-<INSTANCE NAME>' | sort -V > tmp.txt # for example knife search -i 'roles:pre-base-db-redis-cluster-cache' | sort -V > tmp.txt ``` Run the reconfiguration script with the file path as an argument. ``` scripts/redis-cluster-reconfigure.sh path/to/tmp.txt ``` ## Debugging and Diagnosis [Section titled “Debugging and Diagnosis”](#debugging-and-diagnosis) So you think something is wrong with Redis, either as a cause or a symptom. What can you do to find out more? ### Identifying the primary [Section titled “Identifying the primary”](#identifying-the-primary) While the shell prompt on the servers tells you if it is the primary or a replica, you have to potentially shell into multiple nodes to find the primary. Thankfully, Prometheus/Thanos has this information already, and you can find the current primary for all 3 clusters [here](https://thanos.gitlab.net/graph?g0.range_input=1h&g0.max_source_resolution=0s&g0.expr=sum%28redis_instance_info%7Brole%3D%22master%22%2C%20type%3D~%22redis.*%22%2C%20environment%3D%22gprd%22%7D%29%20by%20%28fqdn%29&g0.tab=1) ### Basic stats [Section titled “Basic stats”](#basic-stats) There is 1 core dashboard for redis, with a variant for each cluster: - [Cache](https://dashboards.gitlab.net/d/redis-cluster-cache-main/redis-cluster-cache-overview?orgId=1) - [ChatCache](https://dashboards.gitlab.net/d/redis-cluster-chat-cache-main/redis-cluster-chat-cache-overview?orgId=1) ([To be decommissioned](https://gitlab.com/gitlab-com/gl-infra/production/-/issues/19221)) - [DbLoadBalancing](https://dashboards.gitlab.net/d/redis-db-load-balancing-main/redis-db-load-balancing-overview?orgId=1) - [FeatureFlag](https://dashboards.gitlab.net/d/redis-cluster-feature-flag-main/redis-cluster-feature-flag-overview?orgId=1) - [Persistent/shared](https://dashboards.gitlab.net/d/redis-main/redis-overview?orgId=1) - [Pubsub](https://dashboards.gitlab.net/d/redis-pubsub-main/redis-pubsub-overview?orgId=1) - [Ratelimiting](https://dashboards.gitlab.net/d/redis-cluster-ratelimiting-main/redis-cluster-ratelimiting-overview?orgId=1) - [RepositoryCache](https://dashboards.gitlab.net/d/redis-repository-cache-main/redis-repository-cache-overview?orgId=1) - [Sessions](https://dashboards.gitlab.net/d/redis-sessions-main/redis-sessions-overview?orgId=1) - [Sidekiq](https://dashboards.gitlab.net/d/redis-sidekiq-main/redis-sidekiq-overview?orgId=1) - [Tracechunks](https://dashboards.gitlab.net/d/redis-tracechunks-main/redis-tracechunks-overview?orgId=1) Note that many of the panels are have both Primary and Secondary variants; because only the primary is active, usually only the primary graphs matter *and* the secondaries should be pretty quiet (other than some housekeeping/analysis operations; see"
    ],
    "ground_truths": [
      "The RDB format in Redis affects data storage by saving data to disk every 900 seconds (15 minutes) as long as at least one key has changed. This means that if all three nodes fail at once, there is a risk of losing up to 15 minutes of writes. In contrast, the cache clusters do not regularly write to disk, which means that if all nodes fail simultaneously, the entire cache will be wiped. This is considered acceptable as the cache will be refilled on demand, but it highlights the transient nature of the data stored in Redis."
    ]
  },
  {
    "question": "How does the use of Sidekiq in GitLab's architecture impact the persistence guarantees and high availability of Redis clusters?",
    "answer": "In GitLab's architecture, Sidekiq is utilized for job processing, which means that jobs may not run if there are issues with the Redis instances. The persistence guarantees for Sidekiq imply that some jobs might run twice or not at all if a primary Redis instance fails. High availability is maintained through the use of Redis Sentinel, which manages failover processes. If the primary Redis fails, Sentinel promotes a replica to primary, ensuring that Sidekiq can continue processing jobs without significant downtime. However, the asynchronous nature of Redis replication means that some writes accepted by the lost primary could be lost, which is a concern for Sidekiq's job processing.",
    "contexts": [
      "<1-hop>\n\nis subtly different across the clusters, for historical reasons; the persistent and sidekiq clusters have sentinel running on the VMs alongside redis, whereas the cache cluster uses a distinct set of sentinel VMs. <https://gitlab.com/gitlab-com/gl-infra/reliability/-/issues/11389> records the desire to clean this up. ### Node failure [Section titled “Node failure”](#node-failure) If one or more replicas fail, nothing of note occurs to Redis availability. The primary continues to be the primary, and any remaining replicas continue to replicate. We might receive various alerts (depending on the means of failure) but gitlab.com will remain operational. When the replicas come back online, they will be resynchronized with the primary If the primary fails, sentinel notices and actively manages the failover process, promoting a remaining replica to primary and re-establishing replication off the new primary. When the ex-primary comes back online, it will be reconfigured as a replica by sentinel and pointed to the current primary. If all 3 nodes fail at once, everything grinds to a halt and gitlab.com will be down. #### Slowness can cause failover [Section titled “Slowness can cause failover”](#slowness-can-cause-failover) An important special case of a node being “down” is saturation-induced slowness. Extremely slow response time from the Redis primary can cause Sentinel health checks to timeout, leading Sentinels to force a failover. In this case, the old primary host and its redis-server process are still running, but redis-server is being overwhelmed by its workload. Redis handles its clients’ requests serially. Normally it is able to service all active clients’ requests with little delay. However, if the workload reaches the saturation point (100% of 1 vCPU), then a backlog of client requests can potentially accumulate. Redis treats its Sentinels like any other client. Sentinels periodically send a cheap `PING` request, and if the monitored Redis instance does not respond within Sentinel’s configured timeout (`down-after-milliseconds` = 10 seconds), then that Sentinel considers the unresponsive Redis instance to be “subjectively down”. When a quorum of Sentinels agree (2 of 3), that unresponsive Redis instance is considered “objectively down”. If that unresponsive node is the primary and a majority of Sentinels are up, the Sentinels initiate a failover. Duing such a slowness-induced failover event, it is possible for the overwhelming workload to follow the failover to the new primary node. It takes time to recover the old primary as a working replica, and during that time it is not treated as a failover candidate. So in a 3-node replication set, at most 2 failovers can occur in rapid succession. For reference, historically we have observed a few patterns of client behavior that can lead to severe spikes in Redis response time: - *Periodic microbursts:* Large spikes of concurrent requests from many clients can induce CPU saturation. When thousands of clients participate in such microbursts, the unlucky clients at the tail of the queue can stall for several thousand of milliseconds. For example, this can happen when many clients synchronously expire their local cached response to some very frequent Redis query (e.g. find which GitLab feature flags are enabled). - *Large requests:* Some Redis operations can potentially be much more expensive than most (e.g. adding many elements to a large set via a single atomic `SADD` request). Activity at higher layers in the application stack can sometimes increase the frequency of these 10+ millisecond operations, implicitly causing response time spikes for other clients that have to wait in the queue. ### Network partition [Section titled “Network partition”](#network-partition) For the clusters with sentinel on the VM alongside redis, a simple network partition results in 2 nodes thinking the 3rd is down, and the 3rd node thinking the other 2 are down. If the primary is in the 2-node side, no failover will occur on Redis; when the partition resolves, the replica that was alone will resynchronize replication. If the primary is on the 1-node side, then Sentinel on the two-node side will retain quorum and initiate a failover to one of the nodes on the 2-node side. The old primary will *continue* to be a primary for any clients that can talk to it, but when the network partition heals it will be demoted to a replica and any writes to it during the partition will be lost. See <https://redis.io/topics/sentinel#example-2-basic-setup-with-three-boxes>, in particular `min-replicas-to-write` for more depth on this and the related tradeoffs A 3-way partition will result in no changes; no sentinel will have quorum to force a failover, one primary will remain and any clients that cannot get to the primary will be inoperable. For the cache cluster it depends on the nature of the network partition. At core it is based on what nodes the sentinels can see are up, both between themselves for determining a quorum to make a failover decision, and which redis nodes can be contacted from the sentinels for selecting a primary. In the most “likely” case, where connectivity between AZs goes down, it is equivalent to the behavior of the persistent clusters. A partition between only the sentinels will have no effect. A partition between only the redis nodes will break replication to the separated replica(s), but otherwise have no effect on the operability of the cluster. A partition between sentinels and redis nodes will cause a failover if the loss of communication is between 2 sentinels (that can thus maintain authoritative quorum) and the current primary, as long as the sentinels can still talk to a replica. Consideration of more complicated failure scenarios is left as an exercise for the reader. ### Persistence Guarantees [Section titled “Persistence Guarantees”](#persistence-guarantees) Redis replication is asynchronous (barring the explicit use of the [wait](https://redis.io/commands/wait) command by the application, which we do not currently use). This means any uncontrolled failover can result in the loss of some writes accepted by the lost primary. This is of very little concern for the cache cluster, but could be lightly problematic for the others. For sidekiq it likely means we’ll not run jobs that should be run, or that some jobs will run twice. For the persistent cluster,",
      "<2-hop>\n\nCPUs](#cpus) - [High Availability](#high-availability) - [Node failure](#node-failure) - [Network partition](#network-partition) - [Persistence Guarantees](#persistence-guarantees) - [What do we store?](#what-do-we-store) - [Clients](#clients) - [What about redis cluster?](#what-about-redis-cluster) - [Maintanence](#maintanence) - [Reconfigure](#reconfigure) - [Debugging and Diagnosis](#debugging-and-diagnosis) - [Identifying the primary](#identifying-the-primary) - [Basic stats](#basic-stats) - [Slowlogs](#slowlogs) - [ElasticSearch analysis](#elasticsearch-analysis) - [Monitor commands](#monitor-commands) - [Flamegraphs](#flamegraphs) - [Bigkeys](#bigkeys) ## On this page - [Overview](#_top) - [What is Redis](#what-is-redis) - [Why do we use it?](#why-do-we-use-it) - [Architecture](#architecture) - [CPUs](#cpus) - [High Availability](#high-availability) - [Node failure](#node-failure) - [Network partition](#network-partition) - [Persistence Guarantees](#persistence-guarantees) - [What do we store?](#what-do-we-store) - [Clients](#clients) - [What about redis cluster?](#what-about-redis-cluster) - [Maintanence](#maintanence) - [Reconfigure](#reconfigure) - [Debugging and Diagnosis](#debugging-and-diagnosis) - [Identifying the primary](#identifying-the-primary) - [Basic stats](#basic-stats) - [Slowlogs](#slowlogs) - [ElasticSearch analysis](#elasticsearch-analysis) - [Monitor commands](#monitor-commands) - [Flamegraphs](#flamegraphs) - [Bigkeys](#bigkeys) # A survival guide for SREs to working with Redis at GitLab See also <https://docs.gitlab.com/ee/development/redis.html> which covers some of the same ground, but with a developer orientation and the SRE-oriented [runbook](https://gitlab.com/gitlab-com/runbooks/-/blob/master/docs/redis/redis.md) ## What is Redis [Section titled “What is Redis”](#what-is-redis) Redis is a fast in-memory key-value store. It offers a number of data types, from simple strings to sets, hashes, or complex data types like HyperLogLog. It is fundamentally single-threaded in its core loop, which keeps the implementation simple and robust (e.g. tasks execute serially with no lock contention). However, that means it is constrained to the performance of a single CPU, and any slow task delays the start of other queued tasks. We have had scaling problems in the past on GitLab.com where the single CPU became the bottleneck, and our architectural design has evolved to take that into account. ## Why do we use it? [Section titled “Why do we use it?”](#why-do-we-use-it) We use it both as a cache (for performance savings) and to store various types of persistent data, either directly and explicitly (typically from Rails), or implicitly by using Sidekiq or `Rails.cache` Caching for performance is primarily to reduce the load on other systems, particularly Postgres and Gitaly which are often bottlenecks (or single points of failure) This can also save time in the web tier (e.g. rendering Markdown), but more as a side-effect than the direct reason. ## Architecture [Section titled “Architecture”](#architecture) For gitlab.com, as at September 2023, we have 11 sets of Redis instances, each handling a distinct use case: RoleNodesClientsSentinel?Persistence?Cache for `Rails.cache`redis-cluster-cache-XX-YYPuma workers, Sidekiq workersNoNoneCache for Chat ([To be decommissioned](https://gitlab.com/gitlab-com/gl-infra/production/-/issues/19221))redis-cluster-chat-cache-XX-YYPuma workersNoNoneCache for Feature flagredis-cluster-feature-flag-XX-YYPuma workersNoNoneCache for Repository dataredis-repository-cache-XXPuma workersYes (localhost)NoneSidekiq job queuesredis-sidekiq-XXPuma workers, Sidekiq workersYes (localhost)RDB dump every 900 secondsPersistent shared stateredis-XXPuma workers, Sidekiq workers, WorkhorseYes (localhost)RDB dump every 900 secondsCI build trace chunksredis-tracechunks-XXPuma workers (API), Sidekiq workersYes (localhost)RDB dump every 900 secondsRatelimiting (RackAttack/App)redis-cluster-ratelimiting-XX-YYPuma workersNoNoneSessionsredis-sessions-XXPuma workersYes (localhost)RDB dump every 900 seconds, but also an eviction policyLatest WAL pointerredis-db-load-balancing-XXPuma workers, Sidekiq workersYes (localhost)RDB dump every 900 seconds, but also an eviction policyPub/Subredis-pubsub-XXPuma workers, WorkhorseYes (localhost)No The split is *largely* a form of functional partitioning for scalability (see single threaded comments above), but also because the application expects the non-cache instances to persist data across failures or restarts so those instances must write data to disk periodically (in addition to replication/failover capability). It’s not a full DBMS with guaranteed write semantics (and performance implications to match), but it is sufficiently persistent that there wouldn’t be enormous implications if we did have a substantial failure and had to go back to the RDB files on disk. However, having this level of persistence for our large cache (currently ~60GB of cache) would be expensive in computation and I/O, for insufficient benefit. While we don’t want to lose our cache regularly, we can certainly survive an occasional loss in unlikely circumstances (all 3 nodes die at once, which would probably mean all or much of the rest of our infrastructure is also down or badly affected). At the time (mid 2021) we chose to split CI build trace chunks into it’s own instance, CI trace chunks were responsible for roughly 60% of the data throughput into/out of the shared state redis, and 16% of Redis calls (see <https://gitlab.com/gitlab-org/gitlab/-/issues/327469#note_556531587>) which was sufficient reason for the split, along with the distinctive usage profile (transient data on its way to permanent storage). When we split out Ratelimiting (latter-half of 2021) this was for CPU saturation; the cache instance was peaking at a little over 90% CPU, and we knew from when we [enabled RackAttack in November 2020](https://gitlab.com/gitlab-com/gl-infra/production/-/issues/3034) that it is responsible for at least 25% (absolute) of the CPU utilization, so splitting this out gives the cache instance room to breath. Note that the [data usage](https://gitlab.com/gitlab-com/gl-infra/scalability/-/issues/1246#sizing) is tiny. When we split out Sessions (very late 2021), this was for CPU saturation (antipicated something like 20% absolute savings) and also to separate a workload that may be problematic for Redis Cluster, unblocking perhaps moving the persistent Redis to Cluster in the future. ### CPUs [Section titled “CPUs”](#cpus) Redis VMs were the first nodes we switched to from N1 to ‘[C2](https://cloud.google.com/compute/docs/machine-types#c2_machine_types)’ node types for the best raw single-threaded CPU performance. This [halved](https://gitlab.com/gitlab-com/gl-infra/scalability/-/issues/230#note_312403063) the CPU usage on our sidekiq cluster, and [almost the same](https://gitlab.com/gitlab-com/gl-infra/reliability/-/issues/9636) on the cache cluster. Just in case you were in any doubt as to how important the single-threaded CPU performance was to redis. Redis 6 has [multithreaded I/O](https://github.com/redis/redis/pull/6038/files) which helps by moving some network I/O work to non-core threads, but the core work must still occur on the main thread, so it is only a mitigation. ## High Availability [Section titled “High Availability”](#high-availability) For each cluster we run 3 nodes, using [Redis Sentinel](https://redis.io/topics/sentinel) to manage failover. All traffic goes through the currently active primary, and writes are replicated to the two replicas asynchronously. If the primary fails (as determined by Sentinel), one of the replicas is promoted to primary. Clients are configured to connect to the sentinels which will then direct them to the current primary; there is no load balancer involved in this path. Failover is automatic (handled by Sentinel) and results in clients being disconnected from the primary and then reconnecting via the sentinels again. It requires no operator intervention under normal circumstances The configuration"
    ],
    "ground_truths": [
      "In GitLab's architecture, Sidekiq is utilized for job processing, which means that jobs may not run if there are issues with the Redis instances. The persistence guarantees for Sidekiq imply that some jobs might run twice or not at all if a primary Redis instance fails. High availability is maintained through the use of Redis Sentinel, which manages failover processes. If the primary Redis fails, Sentinel promotes a replica to primary, ensuring that Sidekiq can continue processing jobs without significant downtime. However, the asynchronous nature of Redis replication means that some writes accepted by the lost primary could be lost, which is a concern for Sidekiq's job processing."
    ]
  }
]